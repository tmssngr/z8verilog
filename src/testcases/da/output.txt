VCD info: dumpfile SoC.vcd opened for output.

000c: read 1st byte 31
000d: read 2nd byte 10
  31 10
    srp 10
    reg[fd] = 10

000e: read 1st byte 0c
000f: read 2nd byte 09
  0c 09
    ld r0, #09
    reg[10] = 09

0010: read 1st byte 1c
0011: read 2nd byte 01
  1c 01
    ld r1, #01
    reg[11] = 01

0012: read 1st byte 02
0013: read 2nd byte 01
  02 01
    add r0, r1

0014: read 1st byte 40
    alu:    09       01    =>    0a
         00001001 00000001 => 00001010
    flags = 0000_0000
    reg[10] = 0a
0015: read 2nd byte e0
  40 e0
   da e0
    alu:    0a       01    =>    10
         00001010 00000001 => 00010000
    flags = 0000_0000
    reg[10] = 10
    alu:    10       01    =>    10
         00010000 00000001 => 00010000
    flags = 0000_0000
    reg[10] = 10

0016: read 1st byte 22
0017: read 2nd byte 01
  22 01
    sub r0, r1

0018: read 1st byte 40
    alu:    10       01    =>    0f
         00010000 00000001 => 00001111
    flags = 0000_1100
    reg[10] = 0f
0019: read 2nd byte e0
  40 e0
   da e0
    alu:    0f       01    =>    09
         00001111 00000001 => 00001001
    flags = 0000_1100
    reg[10] = 09
    alu:    09       01    =>    09
         00001001 00000001 => 00001001
    flags = 0000_1100
    reg[10] = 09

001a: read 1st byte 1c
001b: read 2nd byte 09
  1c 09
    ld r1, #09
    reg[11] = 09

001c: read 1st byte 02
001d: read 2nd byte 01
  02 01
    add r0, r1

001e: read 1st byte 40
    alu:    09       09    =>    12
         00001001 00001001 => 00010010
    flags = 0000_0100
    reg[10] = 12
001f: read 2nd byte 10
  40 10
   da 10
    alu:    12       09    =>    18
         00010010 00001001 => 00011000
    flags = 0000_0100
    reg[10] = 18
    alu:    18       09    =>    18
         00011000 00001001 => 00011000
    flags = 0000_0100
    reg[10] = 18

0020: read 1st byte 22
0021: read 2nd byte 01
  22 01
    sub r0, r1

0022: read 1st byte 40
    alu:    18       09    =>    0f
         00011000 00001001 => 00001111
    flags = 0000_1100
    reg[10] = 0f
0023: read 2nd byte 10
  40 10
   da 10
    alu:    0f       09    =>    09
         00001111 00001001 => 00001001
    flags = 0000_1100
    reg[10] = 09
    alu:    09       09    =>    09
         00001001 00001001 => 00001001
    flags = 0000_1100
    reg[10] = 09

0024: read 1st byte 0c
0025: read 2nd byte 15
  0c 15
    ld r0, #15
    reg[10] = 15

0026: read 1st byte 1c
0027: read 2nd byte 87
  1c 87
    ld r1, #87
    reg[11] = 87

0028: read 1st byte 02
0029: read 2nd byte 01
  02 01
    add r0, r1

002a: read 1st byte 40
    alu:    15       87    =>    9c
         00010101 10000111 => 10011100
    flags = 0010_0000
    reg[10] = 9c
002b: read 2nd byte 10
  40 10
   da 10
    alu:    9c       87    =>    a2
         10011100 10000111 => 10100010
    flags = 0010_0000
    reg[10] = a2
    alu:    a2       87    =>    02
         10100010 10000111 => 00000010
    flags = 1000_0000
    reg[10] = 02

002c: read 1st byte 22
002d: read 2nd byte 01
  22 01
    sub r0, r1

002e: read 1st byte 40
    alu:    02       87    =>    7b
         00000010 10000111 => 01111011
    flags = 1000_1100
    reg[10] = 7b
002f: read 2nd byte 10
  40 10
   da 10
    alu:    7b       87    =>    75
         01111011 10000111 => 01110101
    flags = 1000_1100
    reg[10] = 75
    alu:    75       87    =>    15
         01110101 10000111 => 00010101
    flags = 1000_1100
    reg[10] = 15

0030: read 1st byte 0c
0031: read 2nd byte 00
  0c 00
    ld r0, #00
    reg[10] = 00

0032: read 1st byte 1c
0033: read 2nd byte 01
  1c 01
    ld r1, #01
    reg[11] = 01

0034: read 1st byte 22
0035: read 2nd byte 01
  22 01
    sub r0, r1

0036: read 1st byte 40
    alu:    00       01    =>    ff
         00000000 00000001 => 11111111
    flags = 1011_1100
    reg[10] = ff
0037: read 2nd byte 10
  40 10
   da 10
    alu:    ff       01    =>    f9
         11111111 00000001 => 11111001
    flags = 1011_1100
    reg[10] = f9
    alu:    f9       01    =>    99
         11111001 00000001 => 10011001
    flags = 1011_1100
    reg[10] = 99

0038: read 1st byte 02
0039: read 2nd byte 01
  02 01
    add r0, r1

003a: read 1st byte 40
    alu:    99       01    =>    9a
         10011001 00000001 => 10011010
    flags = 0010_0000
    reg[10] = 9a
003b: read 2nd byte 10
  40 10
   da 10
    alu:    9a       01    =>    a0
         10011010 00000001 => 10100000
    flags = 0010_0000
    reg[10] = a0
    alu:    a0       01    =>    00
         10100000 00000001 => 00000000
    flags = 1100_0000
    reg[10] = 00

003c: read 1st byte 0c
003d: read 2nd byte 96
  0c 96
    ld r0, #96
    reg[10] = 96

003e: read 1st byte 02
003f: read 2nd byte 00
  02 00
    add r0, r0

0040: read 1st byte 40
    alu:    96       96    =>    2c
         10010110 10010110 => 00101100
    flags = 1001_0000
    reg[10] = 2c
0041: read 2nd byte e0
  40 e0
   da e0
    alu:    2c       96    =>    32
         00101100 10010110 => 00110010
    flags = 1001_0000
    reg[10] = 32
    alu:    32       96    =>    92
         00110010 10010110 => 10010010
    flags = 1011_0000
    reg[10] = 92

0042: read 1st byte 8d
0043: read 2nd byte 00
0044: read 3rd byte 0c
  8d 00 0c
    jp    , 000c

000c: read 1st byte 31
000d: read 2nd byte 10
testSoC: SUCCESS

VCD info: dumpfile SoC.vcd opened for output.

000c: read 1st byte 31
000d: read 2nd byte 50
  31 50
    srp 50
    reg[fd] = 50

000e: read 1st byte e6
exact  6 cycles
000f: read 2nd byte f8
0010: read 3rd byte 92
  e6 f8 92
    ld f8, #92
    reg[f8] = 92

0011: read 1st byte e6
exact 10 cycles
0012: read 2nd byte fe
0013: read 3rd byte fe
  e6 fe fe
    ld fe, #fe
    reg[fe] = fe

0014: read 1st byte b0
exact 10 cycles
0015: read 2nd byte ff
  b0 ff
    clr ff
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 0000_0000
    reg[ff] = 00

0016: read 1st byte 5c
exact  6 cycles
0017: read 2nd byte fd
  5c fd
    ld r5, #fd
    reg[55] = fd

0018: read 1st byte 4c
exact  6 cycles
0019: read 2nd byte 40
  4c 40
    ld r4, #40
    reg[54] = 40

001a: read 1st byte e6
exact  6 cycles
001b: read 2nd byte 6d
001c: read 3rd byte 00
  e6 6d 00
    ld 6d, #00
    reg[6d] = 00

001d: read 1st byte f0
exact 10 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 0100_0000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_0000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_0000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_0000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_0000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    fd       3f    =>    fe
         11111101 00111111 => 11111110
    flags = 0010_0000
    reg[55] = fe

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0051: read 1st byte 26
exact 10 cycles
0052: read 2nd byte ff
0053: read 3rd byte 08
  26 ff 08
    sub ff, #08

0054: read 1st byte 36
    alu:    08       08    =>    00
         00001000 00001000 => 00000000
    flags = 0100_1000
    reg[ff] = 00
exact 10 cycles
0055: read 2nd byte fe
0056: read 3rd byte 00
  36 fe 00
    sbc fe, #00

0057: read 1st byte 8b
    alu:    fe       00    =>    fe
         11111110 00000000 => 11111110
    flags = 0010_1000
    reg[fe] = fe
exact 10 cycles
0058: read 2nd byte c4
  8b c4
    jr    , c4

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    fe       3f    =>    ff
         11111110 00111111 => 11111111
    flags = 0010_1000
    reg[55] = ff

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0051: read 1st byte 26
exact 10 cycles
0052: read 2nd byte ff
0053: read 3rd byte 08
  26 ff 08
    sub ff, #08

0054: read 1st byte 36
    alu:    08       08    =>    00
         00001000 00001000 => 00000000
    flags = 0100_1000
    reg[ff] = 00
exact 10 cycles
0055: read 2nd byte fe
0056: read 3rd byte 00
  36 fe 00
    sbc fe, #00

0057: read 1st byte 8b
    alu:    fe       00    =>    fe
         11111110 00000000 => 11111110
    flags = 0010_1000
    reg[fe] = fe
exact 10 cycles
0058: read 2nd byte c4
  8b c4
    jr    , c4

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    ff       3f    =>    00
         11111111 00111111 => 00000000
    flags = 0100_1000
    reg[55] = 00

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0059: read 1st byte 5c
exact 12 cycles
005a: read 2nd byte fd
  5c fd
    ld r5, #fd
    reg[55] = fd

005b: read 1st byte ff
exact  6 cycles
005c: read 2nd byte ff
  ff
    nop

005c: read 1st byte ff
exact  6 cycles
005d: read 2nd byte 4a
  ff
    nop

005d: read 1st byte 4a
exact  6 cycles
005e: read 2nd byte be
  4a be
    djnz r4, be
    reg[54] = 3f

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    fd       3f    =>    fe
         11111101 00111111 => 11111110
    flags = 0010_1000
    reg[55] = fe

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0051: read 1st byte 26
exact 10 cycles
0052: read 2nd byte ff
0053: read 3rd byte 08
  26 ff 08
    sub ff, #08

0054: read 1st byte 36
    alu:    10       08    =>    08
         00010000 00001000 => 00001000
    flags = 0000_1100
    reg[ff] = 08
exact 10 cycles
0055: read 2nd byte fe
0056: read 3rd byte 00
  36 fe 00
    sbc fe, #00

0057: read 1st byte 8b
    alu:    fe       00    =>    fe
         11111110 00000000 => 11111110
    flags = 0010_1000
    reg[fe] = fe
exact 10 cycles
0058: read 2nd byte c4
  8b c4
    jr    , c4

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    fe       3f    =>    ff
         11111110 00111111 => 11111111
    flags = 0010_1000
    reg[55] = ff

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0051: read 1st byte 26
exact 10 cycles
0052: read 2nd byte ff
0053: read 3rd byte 08
  26 ff 08
    sub ff, #08

0054: read 1st byte 36
    alu:    10       08    =>    08
         00010000 00001000 => 00001000
    flags = 0000_1100
    reg[ff] = 08
exact 10 cycles
0055: read 2nd byte fe
0056: read 3rd byte 00
  36 fe 00
    sbc fe, #00

0057: read 1st byte 8b
    alu:    fe       00    =>    fe
         11111110 00000000 => 11111110
    flags = 0010_1000
    reg[fe] = fe
exact 10 cycles
0058: read 2nd byte c4
  8b c4
    jr    , c4

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    ff       3f    =>    00
         11111111 00111111 => 00000000
    flags = 0100_1000
    reg[55] = 00

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0059: read 1st byte 5c
exact 12 cycles
005a: read 2nd byte fd
  5c fd
    ld r5, #fd
    reg[55] = fd

005b: read 1st byte ff
exact  6 cycles
005c: read 2nd byte ff
  ff
    nop

005c: read 1st byte ff
exact  6 cycles
005d: read 2nd byte 4a
  ff
    nop

005d: read 1st byte 4a
exact  6 cycles
005e: read 2nd byte be
  4a be
    djnz r4, be
    reg[54] = 3e

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    fd       3f    =>    fe
         11111101 00111111 => 11111110
    flags = 0010_1000
    reg[55] = fe

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0051: read 1st byte 26
exact 10 cycles
0052: read 2nd byte ff
0053: read 3rd byte 08
  26 ff 08
    sub ff, #08

0054: read 1st byte 36
    alu:    18       08    =>    10
         00011000 00001000 => 00010000
    flags = 0000_1000
    reg[ff] = 10
exact 10 cycles
0055: read 2nd byte fe
0056: read 3rd byte 00
  36 fe 00
    sbc fe, #00

0057: read 1st byte 8b
    alu:    fe       00    =>    fe
         11111110 00000000 => 11111110
    flags = 0010_1000
    reg[fe] = fe
exact 10 cycles
0058: read 2nd byte c4
  8b c4
    jr    , c4

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    fe       3f    =>    ff
         11111110 00111111 => 11111111
    flags = 0010_1000
    reg[55] = ff

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0051: read 1st byte 26
exact 10 cycles
0052: read 2nd byte ff
0053: read 3rd byte 08
  26 ff 08
    sub ff, #08

0054: read 1st byte 36
    alu:    18       08    =>    10
         00011000 00001000 => 00010000
    flags = 0000_1000
    reg[ff] = 10
exact 10 cycles
0055: read 2nd byte fe
0056: read 3rd byte 00
  36 fe 00
    sbc fe, #00

0057: read 1st byte 8b
    alu:    fe       00    =>    fe
         11111110 00000000 => 11111110
    flags = 0010_1000
    reg[fe] = fe
exact 10 cycles
0058: read 2nd byte c4
  8b c4
    jr    , c4

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    ff       3f    =>    00
         11111111 00111111 => 00000000
    flags = 0100_1000
    reg[55] = 00

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0059: read 1st byte 5c
exact 12 cycles
005a: read 2nd byte fd
  5c fd
    ld r5, #fd
    reg[55] = fd

005b: read 1st byte ff
exact  6 cycles
005c: read 2nd byte ff
  ff
    nop

005c: read 1st byte ff
exact  6 cycles
005d: read 2nd byte 4a
  ff
    nop

005d: read 1st byte 4a
exact  6 cycles
005e: read 2nd byte be
  4a be
    djnz r4, be
    reg[54] = 3d

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    fd       3f    =>    fe
         11111101 00111111 => 11111110
    flags = 0010_1000
    reg[55] = fe

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0051: read 1st byte 26
exact 10 cycles
0052: read 2nd byte ff
0053: read 3rd byte 08
  26 ff 08
    sub ff, #08

0054: read 1st byte 36
    alu:    20       08    =>    18
         00100000 00001000 => 00011000
    flags = 0000_1100
    reg[ff] = 18
exact 10 cycles
0055: read 2nd byte fe
0056: read 3rd byte 00
  36 fe 00
    sbc fe, #00

0057: read 1st byte 8b
    alu:    fe       00    =>    fe
         11111110 00000000 => 11111110
    flags = 0010_1000
    reg[fe] = fe
exact 10 cycles
0058: read 2nd byte c4
  8b c4
    jr    , c4

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    fe       3f    =>    ff
         11111110 00111111 => 11111111
    flags = 0010_1000
    reg[55] = ff

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0051: read 1st byte 26
exact 10 cycles
0052: read 2nd byte ff
0053: read 3rd byte 08
  26 ff 08
    sub ff, #08

0054: read 1st byte 36
    alu:    20       08    =>    18
         00100000 00001000 => 00011000
    flags = 0000_1100
    reg[ff] = 18
exact 10 cycles
0055: read 2nd byte fe
0056: read 3rd byte 00
  36 fe 00
    sbc fe, #00

0057: read 1st byte 8b
    alu:    fe       00    =>    fe
         11111110 00000000 => 11111110
    flags = 0010_1000
    reg[fe] = fe
exact 10 cycles
0058: read 2nd byte c4
  8b c4
    jr    , c4

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    ff       3f    =>    00
         11111111 00111111 => 00000000
    flags = 0100_1000
    reg[55] = 00

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0059: read 1st byte 5c
exact 12 cycles
005a: read 2nd byte fd
  5c fd
    ld r5, #fd
    reg[55] = fd

005b: read 1st byte ff
exact  6 cycles
005c: read 2nd byte ff
  ff
    nop

005c: read 1st byte ff
exact  6 cycles
005d: read 2nd byte 4a
  ff
    nop

005d: read 1st byte 4a
exact  6 cycles
005e: read 2nd byte be
  4a be
    djnz r4, be
    reg[54] = 3c

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    fd       3f    =>    fe
         11111101 00111111 => 11111110
    flags = 0010_1000
    reg[55] = fe

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0051: read 1st byte 26
exact 10 cycles
0052: read 2nd byte ff
0053: read 3rd byte 08
  26 ff 08
    sub ff, #08

0054: read 1st byte 36
    alu:    28       08    =>    20
         00101000 00001000 => 00100000
    flags = 0000_1000
    reg[ff] = 20
exact 10 cycles
0055: read 2nd byte fe
0056: read 3rd byte 00
  36 fe 00
    sbc fe, #00

0057: read 1st byte 8b
    alu:    fe       00    =>    fe
         11111110 00000000 => 11111110
    flags = 0010_1000
    reg[fe] = fe
exact 10 cycles
0058: read 2nd byte c4
  8b c4
    jr    , c4

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    fe       3f    =>    ff
         11111110 00111111 => 11111111
    flags = 0010_1000
    reg[55] = ff

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0051: read 1st byte 26
exact 10 cycles
0052: read 2nd byte ff
0053: read 3rd byte 08
  26 ff 08
    sub ff, #08

0054: read 1st byte 36
    alu:    28       08    =>    20
         00101000 00001000 => 00100000
    flags = 0000_1000
    reg[ff] = 20
exact 10 cycles
0055: read 2nd byte fe
0056: read 3rd byte 00
  36 fe 00
    sbc fe, #00

0057: read 1st byte 8b
    alu:    fe       00    =>    fe
         11111110 00000000 => 11111110
    flags = 0010_1000
    reg[fe] = fe
exact 10 cycles
0058: read 2nd byte c4
  8b c4
    jr    , c4

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    ff       3f    =>    00
         11111111 00111111 => 00000000
    flags = 0100_1000
    reg[55] = 00

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0059: read 1st byte 5c
exact 12 cycles
005a: read 2nd byte fd
  5c fd
    ld r5, #fd
    reg[55] = fd

005b: read 1st byte ff
exact  6 cycles
005c: read 2nd byte ff
  ff
    nop

005c: read 1st byte ff
exact  6 cycles
005d: read 2nd byte 4a
  ff
    nop

005d: read 1st byte 4a
exact  6 cycles
005e: read 2nd byte be
  4a be
    djnz r4, be
    reg[54] = 3b

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    fd       3f    =>    fe
         11111101 00111111 => 11111110
    flags = 0010_1000
    reg[55] = fe

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0051: read 1st byte 26
exact 10 cycles
0052: read 2nd byte ff
0053: read 3rd byte 08
  26 ff 08
    sub ff, #08

0054: read 1st byte 36
    alu:    30       08    =>    28
         00110000 00001000 => 00101000
    flags = 0000_1100
    reg[ff] = 28
exact 10 cycles
0055: read 2nd byte fe
0056: read 3rd byte 00
  36 fe 00
    sbc fe, #00

0057: read 1st byte 8b
    alu:    fe       00    =>    fe
         11111110 00000000 => 11111110
    flags = 0010_1000
    reg[fe] = fe
exact 10 cycles
0058: read 2nd byte c4
  8b c4
    jr    , c4

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    fe       3f    =>    ff
         11111110 00111111 => 11111111
    flags = 0010_1000
    reg[55] = ff

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0051: read 1st byte 26
exact 10 cycles
0052: read 2nd byte ff
0053: read 3rd byte 08
  26 ff 08
    sub ff, #08

0054: read 1st byte 36
    alu:    30       08    =>    28
         00110000 00001000 => 00101000
    flags = 0000_1100
    reg[ff] = 28
exact 10 cycles
0055: read 2nd byte fe
0056: read 3rd byte 00
  36 fe 00
    sbc fe, #00

0057: read 1st byte 8b
    alu:    fe       00    =>    fe
         11111110 00000000 => 11111110
    flags = 0010_1000
    reg[fe] = fe
exact 10 cycles
0058: read 2nd byte c4
  8b c4
    jr    , c4

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    ff       3f    =>    00
         11111111 00111111 => 00000000
    flags = 0100_1000
    reg[55] = 00

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0059: read 1st byte 5c
exact 12 cycles
005a: read 2nd byte fd
  5c fd
    ld r5, #fd
    reg[55] = fd

005b: read 1st byte ff
exact  6 cycles
005c: read 2nd byte ff
  ff
    nop

005c: read 1st byte ff
exact  6 cycles
005d: read 2nd byte 4a
  ff
    nop

005d: read 1st byte 4a
exact  6 cycles
005e: read 2nd byte be
  4a be
    djnz r4, be
    reg[54] = 3a

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    fd       3f    =>    fe
         11111101 00111111 => 11111110
    flags = 0010_1000
    reg[55] = fe

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0051: read 1st byte 26
exact 10 cycles
0052: read 2nd byte ff
0053: read 3rd byte 08
  26 ff 08
    sub ff, #08

0054: read 1st byte 36
    alu:    38       08    =>    30
         00111000 00001000 => 00110000
    flags = 0000_1000
    reg[ff] = 30
exact 10 cycles
0055: read 2nd byte fe
0056: read 3rd byte 00
  36 fe 00
    sbc fe, #00

0057: read 1st byte 8b
    alu:    fe       00    =>    fe
         11111110 00000000 => 11111110
    flags = 0010_1000
    reg[fe] = fe
exact 10 cycles
0058: read 2nd byte c4
  8b c4
    jr    , c4

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    fe       3f    =>    ff
         11111110 00111111 => 11111111
    flags = 0010_1000
    reg[55] = ff

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0051: read 1st byte 26
exact 10 cycles
0052: read 2nd byte ff
0053: read 3rd byte 08
  26 ff 08
    sub ff, #08

0054: read 1st byte 36
    alu:    38       08    =>    30
         00111000 00001000 => 00110000
    flags = 0000_1000
    reg[ff] = 30
exact 10 cycles
0055: read 2nd byte fe
0056: read 3rd byte 00
  36 fe 00
    sbc fe, #00

0057: read 1st byte 8b
    alu:    fe       00    =>    fe
         11111110 00000000 => 11111110
    flags = 0010_1000
    reg[fe] = fe
exact 10 cycles
0058: read 2nd byte c4
  8b c4
    jr    , c4

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    ff       3f    =>    00
         11111111 00111111 => 00000000
    flags = 0100_1000
    reg[55] = 00

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0059: read 1st byte 5c
exact 12 cycles
005a: read 2nd byte fd
  5c fd
    ld r5, #fd
    reg[55] = fd

005b: read 1st byte ff
exact  6 cycles
005c: read 2nd byte ff
  ff
    nop

005c: read 1st byte ff
exact  6 cycles
005d: read 2nd byte 4a
  ff
    nop

005d: read 1st byte 4a
exact  6 cycles
005e: read 2nd byte be
  4a be
    djnz r4, be
    reg[54] = 39

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    fd       3f    =>    fe
         11111101 00111111 => 11111110
    flags = 0010_1000
    reg[55] = fe

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0051: read 1st byte 26
exact 10 cycles
0052: read 2nd byte ff
0053: read 3rd byte 08
  26 ff 08
    sub ff, #08

0054: read 1st byte 36
    alu:    40       08    =>    38
         01000000 00001000 => 00111000
    flags = 0000_1100
    reg[ff] = 38
exact 10 cycles
0055: read 2nd byte fe
0056: read 3rd byte 00
  36 fe 00
    sbc fe, #00

0057: read 1st byte 8b
    alu:    fe       00    =>    fe
         11111110 00000000 => 11111110
    flags = 0010_1000
    reg[fe] = fe
exact 10 cycles
0058: read 2nd byte c4
  8b c4
    jr    , c4

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    fe       3f    =>    ff
         11111110 00111111 => 11111111
    flags = 0010_1000
    reg[55] = ff

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0051: read 1st byte 26
exact 10 cycles
0052: read 2nd byte ff
0053: read 3rd byte 08
  26 ff 08
    sub ff, #08

0054: read 1st byte 36
    alu:    40       08    =>    38
         01000000 00001000 => 00111000
    flags = 0000_1100
    reg[ff] = 38
exact 10 cycles
0055: read 2nd byte fe
0056: read 3rd byte 00
  36 fe 00
    sbc fe, #00

0057: read 1st byte 8b
    alu:    fe       00    =>    fe
         11111110 00000000 => 11111110
    flags = 0010_1000
    reg[fe] = fe
exact 10 cycles
0058: read 2nd byte c4
  8b c4
    jr    , c4

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    ff       3f    =>    00
         11111111 00111111 => 00000000
    flags = 0100_1000
    reg[55] = 00

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0059: read 1st byte 5c
exact 12 cycles
005a: read 2nd byte fd
  5c fd
    ld r5, #fd
    reg[55] = fd

005b: read 1st byte ff
exact  6 cycles
005c: read 2nd byte ff
  ff
    nop

005c: read 1st byte ff
exact  6 cycles
005d: read 2nd byte 4a
  ff
    nop

005d: read 1st byte 4a
exact  6 cycles
005e: read 2nd byte be
  4a be
    djnz r4, be
    reg[54] = 38

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    fd       3f    =>    fe
         11111101 00111111 => 11111110
    flags = 0010_1000
    reg[55] = fe

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0051: read 1st byte 26
exact 10 cycles
0052: read 2nd byte ff
0053: read 3rd byte 08
  26 ff 08
    sub ff, #08

0054: read 1st byte 36
    alu:    48       08    =>    40
         01001000 00001000 => 01000000
    flags = 0000_1000
    reg[ff] = 40
exact 10 cycles
0055: read 2nd byte fe
0056: read 3rd byte 00
  36 fe 00
    sbc fe, #00

0057: read 1st byte 8b
    alu:    fe       00    =>    fe
         11111110 00000000 => 11111110
    flags = 0010_1000
    reg[fe] = fe
exact 10 cycles
0058: read 2nd byte c4
  8b c4
    jr    , c4

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    fe       3f    =>    ff
         11111110 00111111 => 11111111
    flags = 0010_1000
    reg[55] = ff

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0051: read 1st byte 26
exact 10 cycles
0052: read 2nd byte ff
0053: read 3rd byte 08
  26 ff 08
    sub ff, #08

0054: read 1st byte 36
    alu:    48       08    =>    40
         01001000 00001000 => 01000000
    flags = 0000_1000
    reg[ff] = 40
exact 10 cycles
0055: read 2nd byte fe
0056: read 3rd byte 00
  36 fe 00
    sbc fe, #00

0057: read 1st byte 8b
    alu:    fe       00    =>    fe
         11111110 00000000 => 11111110
    flags = 0010_1000
    reg[fe] = fe
exact 10 cycles
0058: read 2nd byte c4
  8b c4
    jr    , c4

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    ff       3f    =>    00
         11111111 00111111 => 00000000
    flags = 0100_1000
    reg[55] = 00

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0059: read 1st byte 5c
exact 12 cycles
005a: read 2nd byte fd
  5c fd
    ld r5, #fd
    reg[55] = fd

005b: read 1st byte ff
exact  6 cycles
005c: read 2nd byte ff
  ff
    nop

005c: read 1st byte ff
exact  6 cycles
005d: read 2nd byte 4a
  ff
    nop

005d: read 1st byte 4a
exact  6 cycles
005e: read 2nd byte be
  4a be
    djnz r4, be
    reg[54] = 37

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    fd       3f    =>    fe
         11111101 00111111 => 11111110
    flags = 0010_1000
    reg[55] = fe

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0051: read 1st byte 26
exact 10 cycles
0052: read 2nd byte ff
0053: read 3rd byte 08
  26 ff 08
    sub ff, #08

0054: read 1st byte 36
    alu:    50       08    =>    48
         01010000 00001000 => 01001000
    flags = 0000_1100
    reg[ff] = 48
exact 10 cycles
0055: read 2nd byte fe
0056: read 3rd byte 00
  36 fe 00
    sbc fe, #00

0057: read 1st byte 8b
    alu:    fe       00    =>    fe
         11111110 00000000 => 11111110
    flags = 0010_1000
    reg[fe] = fe
exact 10 cycles
0058: read 2nd byte c4
  8b c4
    jr    , c4

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    fe       3f    =>    ff
         11111110 00111111 => 11111111
    flags = 0010_1000
    reg[55] = ff

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0051: read 1st byte 26
exact 10 cycles
0052: read 2nd byte ff
0053: read 3rd byte 08
  26 ff 08
    sub ff, #08

0054: read 1st byte 36
    alu:    50       08    =>    48
         01010000 00001000 => 01001000
    flags = 0000_1100
    reg[ff] = 48
exact 10 cycles
0055: read 2nd byte fe
0056: read 3rd byte 00
  36 fe 00
    sbc fe, #00

0057: read 1st byte 8b
    alu:    fe       00    =>    fe
         11111110 00000000 => 11111110
    flags = 0010_1000
    reg[fe] = fe
exact 10 cycles
0058: read 2nd byte c4
  8b c4
    jr    , c4

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    ff       3f    =>    00
         11111111 00111111 => 00000000
    flags = 0100_1000
    reg[55] = 00

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0059: read 1st byte 5c
exact 12 cycles
005a: read 2nd byte fd
  5c fd
    ld r5, #fd
    reg[55] = fd

005b: read 1st byte ff
exact  6 cycles
005c: read 2nd byte ff
  ff
    nop

005c: read 1st byte ff
exact  6 cycles
005d: read 2nd byte 4a
  ff
    nop

005d: read 1st byte 4a
exact  6 cycles
005e: read 2nd byte be
  4a be
    djnz r4, be
    reg[54] = 36

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    fd       3f    =>    fe
         11111101 00111111 => 11111110
    flags = 0010_1000
    reg[55] = fe

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0051: read 1st byte 26
exact 10 cycles
0052: read 2nd byte ff
0053: read 3rd byte 08
  26 ff 08
    sub ff, #08

0054: read 1st byte 36
    alu:    58       08    =>    50
         01011000 00001000 => 01010000
    flags = 0000_1000
    reg[ff] = 50
exact 10 cycles
0055: read 2nd byte fe
0056: read 3rd byte 00
  36 fe 00
    sbc fe, #00

0057: read 1st byte 8b
    alu:    fe       00    =>    fe
         11111110 00000000 => 11111110
    flags = 0010_1000
    reg[fe] = fe
exact 10 cycles
0058: read 2nd byte c4
  8b c4
    jr    , c4

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    fe       3f    =>    ff
         11111110 00111111 => 11111111
    flags = 0010_1000
    reg[55] = ff

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0051: read 1st byte 26
exact 10 cycles
0052: read 2nd byte ff
0053: read 3rd byte 08
  26 ff 08
    sub ff, #08

0054: read 1st byte 36
    alu:    58       08    =>    50
         01011000 00001000 => 01010000
    flags = 0000_1000
    reg[ff] = 50
exact 10 cycles
0055: read 2nd byte fe
0056: read 3rd byte 00
  36 fe 00
    sbc fe, #00

0057: read 1st byte 8b
    alu:    fe       00    =>    fe
         11111110 00000000 => 11111110
    flags = 0010_1000
    reg[fe] = fe
exact 10 cycles
0058: read 2nd byte c4
  8b c4
    jr    , c4

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    ff       3f    =>    00
         11111111 00111111 => 00000000
    flags = 0100_1000
    reg[55] = 00

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0059: read 1st byte 5c
exact 12 cycles
005a: read 2nd byte fd
  5c fd
    ld r5, #fd
    reg[55] = fd

005b: read 1st byte ff
exact  6 cycles
005c: read 2nd byte ff
  ff
    nop

005c: read 1st byte ff
exact  6 cycles
005d: read 2nd byte 4a
  ff
    nop

005d: read 1st byte 4a
exact  6 cycles
005e: read 2nd byte be
  4a be
    djnz r4, be
    reg[54] = 35

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    fd       3f    =>    fe
         11111101 00111111 => 11111110
    flags = 0010_1000
    reg[55] = fe

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0051: read 1st byte 26
exact 10 cycles
0052: read 2nd byte ff
0053: read 3rd byte 08
  26 ff 08
    sub ff, #08

0054: read 1st byte 36
    alu:    60       08    =>    58
         01100000 00001000 => 01011000
    flags = 0000_1100
    reg[ff] = 58
exact 10 cycles
0055: read 2nd byte fe
0056: read 3rd byte 00
  36 fe 00
    sbc fe, #00

0057: read 1st byte 8b
    alu:    fe       00    =>    fe
         11111110 00000000 => 11111110
    flags = 0010_1000
    reg[fe] = fe
exact 10 cycles
0058: read 2nd byte c4
  8b c4
    jr    , c4

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    fe       3f    =>    ff
         11111110 00111111 => 11111111
    flags = 0010_1000
    reg[55] = ff

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0051: read 1st byte 26
exact 10 cycles
0052: read 2nd byte ff
0053: read 3rd byte 08
  26 ff 08
    sub ff, #08

0054: read 1st byte 36
    alu:    60       08    =>    58
         01100000 00001000 => 01011000
    flags = 0000_1100
    reg[ff] = 58
exact 10 cycles
0055: read 2nd byte fe
0056: read 3rd byte 00
  36 fe 00
    sbc fe, #00

0057: read 1st byte 8b
    alu:    fe       00    =>    fe
         11111110 00000000 => 11111110
    flags = 0010_1000
    reg[fe] = fe
exact 10 cycles
0058: read 2nd byte c4
  8b c4
    jr    , c4

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    ff       3f    =>    00
         11111111 00111111 => 00000000
    flags = 0100_1000
    reg[55] = 00

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0059: read 1st byte 5c
exact 12 cycles
005a: read 2nd byte fd
  5c fd
    ld r5, #fd
    reg[55] = fd

005b: read 1st byte ff
exact  6 cycles
005c: read 2nd byte ff
  ff
    nop

005c: read 1st byte ff
exact  6 cycles
005d: read 2nd byte 4a
  ff
    nop

005d: read 1st byte 4a
exact  6 cycles
005e: read 2nd byte be
  4a be
    djnz r4, be
    reg[54] = 34

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    fd       3f    =>    fe
         11111101 00111111 => 11111110
    flags = 0010_1000
    reg[55] = fe

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0051: read 1st byte 26
exact 10 cycles
0052: read 2nd byte ff
0053: read 3rd byte 08
  26 ff 08
    sub ff, #08

0054: read 1st byte 36
    alu:    68       08    =>    60
         01101000 00001000 => 01100000
    flags = 0000_1000
    reg[ff] = 60
exact 10 cycles
0055: read 2nd byte fe
0056: read 3rd byte 00
  36 fe 00
    sbc fe, #00

0057: read 1st byte 8b
    alu:    fe       00    =>    fe
         11111110 00000000 => 11111110
    flags = 0010_1000
    reg[fe] = fe
exact 10 cycles
0058: read 2nd byte c4
  8b c4
    jr    , c4

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    fe       3f    =>    ff
         11111110 00111111 => 11111111
    flags = 0010_1000
    reg[55] = ff

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0051: read 1st byte 26
exact 10 cycles
0052: read 2nd byte ff
0053: read 3rd byte 08
  26 ff 08
    sub ff, #08

0054: read 1st byte 36
    alu:    68       08    =>    60
         01101000 00001000 => 01100000
    flags = 0000_1000
    reg[ff] = 60
exact 10 cycles
0055: read 2nd byte fe
0056: read 3rd byte 00
  36 fe 00
    sbc fe, #00

0057: read 1st byte 8b
    alu:    fe       00    =>    fe
         11111110 00000000 => 11111110
    flags = 0010_1000
    reg[fe] = fe
exact 10 cycles
0058: read 2nd byte c4
  8b c4
    jr    , c4

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    ff       3f    =>    00
         11111111 00111111 => 00000000
    flags = 0100_1000
    reg[55] = 00

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0059: read 1st byte 5c
exact 12 cycles
005a: read 2nd byte fd
  5c fd
    ld r5, #fd
    reg[55] = fd

005b: read 1st byte ff
exact  6 cycles
005c: read 2nd byte ff
  ff
    nop

005c: read 1st byte ff
exact  6 cycles
005d: read 2nd byte 4a
  ff
    nop

005d: read 1st byte 4a
exact  6 cycles
005e: read 2nd byte be
  4a be
    djnz r4, be
    reg[54] = 33

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    fd       3f    =>    fe
         11111101 00111111 => 11111110
    flags = 0010_1000
    reg[55] = fe

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0051: read 1st byte 26
exact 10 cycles
0052: read 2nd byte ff
0053: read 3rd byte 08
  26 ff 08
    sub ff, #08

0054: read 1st byte 36
    alu:    70       08    =>    68
         01110000 00001000 => 01101000
    flags = 0000_1100
    reg[ff] = 68
exact 10 cycles
0055: read 2nd byte fe
0056: read 3rd byte 00
  36 fe 00
    sbc fe, #00

0057: read 1st byte 8b
    alu:    fe       00    =>    fe
         11111110 00000000 => 11111110
    flags = 0010_1000
    reg[fe] = fe
exact 10 cycles
0058: read 2nd byte c4
  8b c4
    jr    , c4

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    fe       3f    =>    ff
         11111110 00111111 => 11111111
    flags = 0010_1000
    reg[55] = ff

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0051: read 1st byte 26
exact 10 cycles
0052: read 2nd byte ff
0053: read 3rd byte 08
  26 ff 08
    sub ff, #08

0054: read 1st byte 36
    alu:    70       08    =>    68
         01110000 00001000 => 01101000
    flags = 0000_1100
    reg[ff] = 68
exact 10 cycles
0055: read 2nd byte fe
0056: read 3rd byte 00
  36 fe 00
    sbc fe, #00

0057: read 1st byte 8b
    alu:    fe       00    =>    fe
         11111110 00000000 => 11111110
    flags = 0010_1000
    reg[fe] = fe
exact 10 cycles
0058: read 2nd byte c4
  8b c4
    jr    , c4

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    ff       3f    =>    00
         11111111 00111111 => 00000000
    flags = 0100_1000
    reg[55] = 00

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0059: read 1st byte 5c
exact 12 cycles
005a: read 2nd byte fd
  5c fd
    ld r5, #fd
    reg[55] = fd

005b: read 1st byte ff
exact  6 cycles
005c: read 2nd byte ff
  ff
    nop

005c: read 1st byte ff
exact  6 cycles
005d: read 2nd byte 4a
  ff
    nop

005d: read 1st byte 4a
exact  6 cycles
005e: read 2nd byte be
  4a be
    djnz r4, be
    reg[54] = 32

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    fd       3f    =>    fe
         11111101 00111111 => 11111110
    flags = 0010_1000
    reg[55] = fe

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0051: read 1st byte 26
exact 10 cycles
0052: read 2nd byte ff
0053: read 3rd byte 08
  26 ff 08
    sub ff, #08

0054: read 1st byte 36
    alu:    78       08    =>    70
         01111000 00001000 => 01110000
    flags = 0000_1000
    reg[ff] = 70
exact 10 cycles
0055: read 2nd byte fe
0056: read 3rd byte 00
  36 fe 00
    sbc fe, #00

0057: read 1st byte 8b
    alu:    fe       00    =>    fe
         11111110 00000000 => 11111110
    flags = 0010_1000
    reg[fe] = fe
exact 10 cycles
0058: read 2nd byte c4
  8b c4
    jr    , c4

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    fe       3f    =>    ff
         11111110 00111111 => 11111111
    flags = 0010_1000
    reg[55] = ff

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0051: read 1st byte 26
exact 10 cycles
0052: read 2nd byte ff
0053: read 3rd byte 08
  26 ff 08
    sub ff, #08

0054: read 1st byte 36
    alu:    78       08    =>    70
         01111000 00001000 => 01110000
    flags = 0000_1000
    reg[ff] = 70
exact 10 cycles
0055: read 2nd byte fe
0056: read 3rd byte 00
  36 fe 00
    sbc fe, #00

0057: read 1st byte 8b
    alu:    fe       00    =>    fe
         11111110 00000000 => 11111110
    flags = 0010_1000
    reg[fe] = fe
exact 10 cycles
0058: read 2nd byte c4
  8b c4
    jr    , c4

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    ff       3f    =>    00
         11111111 00111111 => 00000000
    flags = 0100_1000
    reg[55] = 00

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0059: read 1st byte 5c
exact 12 cycles
005a: read 2nd byte fd
  5c fd
    ld r5, #fd
    reg[55] = fd

005b: read 1st byte ff
exact  6 cycles
005c: read 2nd byte ff
  ff
    nop

005c: read 1st byte ff
exact  6 cycles
005d: read 2nd byte 4a
  ff
    nop

005d: read 1st byte 4a
exact  6 cycles
005e: read 2nd byte be
  4a be
    djnz r4, be
    reg[54] = 31

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    fd       3f    =>    fe
         11111101 00111111 => 11111110
    flags = 0010_1000
    reg[55] = fe

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0051: read 1st byte 26
exact 10 cycles
0052: read 2nd byte ff
0053: read 3rd byte 08
  26 ff 08
    sub ff, #08

0054: read 1st byte 36
    alu:    80       08    =>    78
         10000000 00001000 => 01111000
    flags = 0000_1100
    reg[ff] = 78
exact 10 cycles
0055: read 2nd byte fe
0056: read 3rd byte 00
  36 fe 00
    sbc fe, #00

0057: read 1st byte 8b
    alu:    fe       00    =>    fe
         11111110 00000000 => 11111110
    flags = 0010_1000
    reg[fe] = fe
exact 10 cycles
0058: read 2nd byte c4
  8b c4
    jr    , c4

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    fe       3f    =>    ff
         11111110 00111111 => 11111111
    flags = 0010_1000
    reg[55] = ff

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0051: read 1st byte 26
exact 10 cycles
0052: read 2nd byte ff
0053: read 3rd byte 08
  26 ff 08
    sub ff, #08

0054: read 1st byte 36
    alu:    80       08    =>    78
         10000000 00001000 => 01111000
    flags = 0000_1100
    reg[ff] = 78
exact 10 cycles
0055: read 2nd byte fe
0056: read 3rd byte 00
  36 fe 00
    sbc fe, #00

0057: read 1st byte 8b
    alu:    fe       00    =>    fe
         11111110 00000000 => 11111110
    flags = 0010_1000
    reg[fe] = fe
exact 10 cycles
0058: read 2nd byte c4
  8b c4
    jr    , c4

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    ff       3f    =>    00
         11111111 00111111 => 00000000
    flags = 0100_1000
    reg[55] = 00

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0059: read 1st byte 5c
exact 12 cycles
005a: read 2nd byte fd
  5c fd
    ld r5, #fd
    reg[55] = fd

005b: read 1st byte ff
exact  6 cycles
005c: read 2nd byte ff
  ff
    nop

005c: read 1st byte ff
exact  6 cycles
005d: read 2nd byte 4a
  ff
    nop

005d: read 1st byte 4a
exact  6 cycles
005e: read 2nd byte be
  4a be
    djnz r4, be
    reg[54] = 30

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    fd       3f    =>    fe
         11111101 00111111 => 11111110
    flags = 0010_1000
    reg[55] = fe

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0051: read 1st byte 26
exact 10 cycles
0052: read 2nd byte ff
0053: read 3rd byte 08
  26 ff 08
    sub ff, #08

0054: read 1st byte 36
    alu:    88       08    =>    80
         10001000 00001000 => 10000000
    flags = 0010_1000
    reg[ff] = 80
exact 10 cycles
0055: read 2nd byte fe
0056: read 3rd byte 00
  36 fe 00
    sbc fe, #00

0057: read 1st byte 8b
    alu:    fe       00    =>    fe
         11111110 00000000 => 11111110
    flags = 0010_1000
    reg[fe] = fe
exact 10 cycles
0058: read 2nd byte c4
  8b c4
    jr    , c4

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    fe       3f    =>    ff
         11111110 00111111 => 11111111
    flags = 0010_1000
    reg[55] = ff

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0051: read 1st byte 26
exact 10 cycles
0052: read 2nd byte ff
0053: read 3rd byte 08
  26 ff 08
    sub ff, #08

0054: read 1st byte 36
    alu:    88       08    =>    80
         10001000 00001000 => 10000000
    flags = 0010_1000
    reg[ff] = 80
exact 10 cycles
0055: read 2nd byte fe
0056: read 3rd byte 00
  36 fe 00
    sbc fe, #00

0057: read 1st byte 8b
    alu:    fe       00    =>    fe
         11111110 00000000 => 11111110
    flags = 0010_1000
    reg[fe] = fe
exact 10 cycles
0058: read 2nd byte c4
  8b c4
    jr    , c4

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    ff       3f    =>    00
         11111111 00111111 => 00000000
    flags = 0100_1000
    reg[55] = 00

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0059: read 1st byte 5c
exact 12 cycles
005a: read 2nd byte fd
  5c fd
    ld r5, #fd
    reg[55] = fd

005b: read 1st byte ff
exact  6 cycles
005c: read 2nd byte ff
  ff
    nop

005c: read 1st byte ff
exact  6 cycles
005d: read 2nd byte 4a
  ff
    nop

005d: read 1st byte 4a
exact  6 cycles
005e: read 2nd byte be
  4a be
    djnz r4, be
    reg[54] = 2f

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    fd       3f    =>    fe
         11111101 00111111 => 11111110
    flags = 0010_1000
    reg[55] = fe

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0051: read 1st byte 26
exact 10 cycles
0052: read 2nd byte ff
0053: read 3rd byte 08
  26 ff 08
    sub ff, #08

0054: read 1st byte 36
    alu:    90       08    =>    88
         10010000 00001000 => 10001000
    flags = 0010_1100
    reg[ff] = 88
exact 10 cycles
0055: read 2nd byte fe
0056: read 3rd byte 00
  36 fe 00
    sbc fe, #00

0057: read 1st byte 8b
    alu:    fe       00    =>    fe
         11111110 00000000 => 11111110
    flags = 0010_1000
    reg[fe] = fe
exact 10 cycles
0058: read 2nd byte c4
  8b c4
    jr    , c4

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    fe       3f    =>    ff
         11111110 00111111 => 11111111
    flags = 0010_1000
    reg[55] = ff

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0051: read 1st byte 26
exact 10 cycles
0052: read 2nd byte ff
0053: read 3rd byte 08
  26 ff 08
    sub ff, #08

0054: read 1st byte 36
    alu:    90       08    =>    88
         10010000 00001000 => 10001000
    flags = 0010_1100
    reg[ff] = 88
exact 10 cycles
0055: read 2nd byte fe
0056: read 3rd byte 00
  36 fe 00
    sbc fe, #00

0057: read 1st byte 8b
    alu:    fe       00    =>    fe
         11111110 00000000 => 11111110
    flags = 0010_1000
    reg[fe] = fe
exact 10 cycles
0058: read 2nd byte c4
  8b c4
    jr    , c4

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    ff       3f    =>    00
         11111111 00111111 => 00000000
    flags = 0100_1000
    reg[55] = 00

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0059: read 1st byte 5c
exact 12 cycles
005a: read 2nd byte fd
  5c fd
    ld r5, #fd
    reg[55] = fd

005b: read 1st byte ff
exact  6 cycles
005c: read 2nd byte ff
  ff
    nop

005c: read 1st byte ff
exact  6 cycles
005d: read 2nd byte 4a
  ff
    nop

005d: read 1st byte 4a
exact  6 cycles
005e: read 2nd byte be
  4a be
    djnz r4, be
    reg[54] = 2e

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    fd       3f    =>    fe
         11111101 00111111 => 11111110
    flags = 0010_1000
    reg[55] = fe

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0051: read 1st byte 26
exact 10 cycles
0052: read 2nd byte ff
0053: read 3rd byte 08
  26 ff 08
    sub ff, #08

0054: read 1st byte 36
    alu:    98       08    =>    90
         10011000 00001000 => 10010000
    flags = 0010_1000
    reg[ff] = 90
exact 10 cycles
0055: read 2nd byte fe
0056: read 3rd byte 00
  36 fe 00
    sbc fe, #00

0057: read 1st byte 8b
    alu:    fe       00    =>    fe
         11111110 00000000 => 11111110
    flags = 0010_1000
    reg[fe] = fe
exact 10 cycles
0058: read 2nd byte c4
  8b c4
    jr    , c4

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    fe       3f    =>    ff
         11111110 00111111 => 11111111
    flags = 0010_1000
    reg[55] = ff

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0051: read 1st byte 26
exact 10 cycles
0052: read 2nd byte ff
0053: read 3rd byte 08
  26 ff 08
    sub ff, #08

0054: read 1st byte 36
    alu:    98       08    =>    90
         10011000 00001000 => 10010000
    flags = 0010_1000
    reg[ff] = 90
exact 10 cycles
0055: read 2nd byte fe
0056: read 3rd byte 00
  36 fe 00
    sbc fe, #00

0057: read 1st byte 8b
    alu:    fe       00    =>    fe
         11111110 00000000 => 11111110
    flags = 0010_1000
    reg[fe] = fe
exact 10 cycles
0058: read 2nd byte c4
  8b c4
    jr    , c4

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    ff       3f    =>    00
         11111111 00111111 => 00000000
    flags = 0100_1000
    reg[55] = 00

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0059: read 1st byte 5c
exact 12 cycles
005a: read 2nd byte fd
  5c fd
    ld r5, #fd
    reg[55] = fd

005b: read 1st byte ff
exact  6 cycles
005c: read 2nd byte ff
  ff
    nop

005c: read 1st byte ff
exact  6 cycles
005d: read 2nd byte 4a
  ff
    nop

005d: read 1st byte 4a
exact  6 cycles
005e: read 2nd byte be
  4a be
    djnz r4, be
    reg[54] = 2d

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    fd       3f    =>    fe
         11111101 00111111 => 11111110
    flags = 0010_1000
    reg[55] = fe

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0051: read 1st byte 26
exact 10 cycles
0052: read 2nd byte ff
0053: read 3rd byte 08
  26 ff 08
    sub ff, #08

0054: read 1st byte 36
    alu:    a0       08    =>    98
         10100000 00001000 => 10011000
    flags = 0010_1100
    reg[ff] = 98
exact 10 cycles
0055: read 2nd byte fe
0056: read 3rd byte 00
  36 fe 00
    sbc fe, #00

0057: read 1st byte 8b
    alu:    fe       00    =>    fe
         11111110 00000000 => 11111110
    flags = 0010_1000
    reg[fe] = fe
exact 10 cycles
0058: read 2nd byte c4
  8b c4
    jr    , c4

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    fe       3f    =>    ff
         11111110 00111111 => 11111111
    flags = 0010_1000
    reg[55] = ff

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0051: read 1st byte 26
exact 10 cycles
0052: read 2nd byte ff
0053: read 3rd byte 08
  26 ff 08
    sub ff, #08

0054: read 1st byte 36
    alu:    a0       08    =>    98
         10100000 00001000 => 10011000
    flags = 0010_1100
    reg[ff] = 98
exact 10 cycles
0055: read 2nd byte fe
0056: read 3rd byte 00
  36 fe 00
    sbc fe, #00

0057: read 1st byte 8b
    alu:    fe       00    =>    fe
         11111110 00000000 => 11111110
    flags = 0010_1000
    reg[fe] = fe
exact 10 cycles
0058: read 2nd byte c4
  8b c4
    jr    , c4

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    ff       3f    =>    00
         11111111 00111111 => 00000000
    flags = 0100_1000
    reg[55] = 00

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0059: read 1st byte 5c
exact 12 cycles
005a: read 2nd byte fd
  5c fd
    ld r5, #fd
    reg[55] = fd

005b: read 1st byte ff
exact  6 cycles
005c: read 2nd byte ff
  ff
    nop

005c: read 1st byte ff
exact  6 cycles
005d: read 2nd byte 4a
  ff
    nop

005d: read 1st byte 4a
exact  6 cycles
005e: read 2nd byte be
  4a be
    djnz r4, be
    reg[54] = 2c

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    fd       3f    =>    fe
         11111101 00111111 => 11111110
    flags = 0010_1000
    reg[55] = fe

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0051: read 1st byte 26
exact 10 cycles
0052: read 2nd byte ff
0053: read 3rd byte 08
  26 ff 08
    sub ff, #08

0054: read 1st byte 36
    alu:    a8       08    =>    a0
         10101000 00001000 => 10100000
    flags = 0010_1000
    reg[ff] = a0
exact 10 cycles
0055: read 2nd byte fe
0056: read 3rd byte 00
  36 fe 00
    sbc fe, #00

0057: read 1st byte 8b
    alu:    fe       00    =>    fe
         11111110 00000000 => 11111110
    flags = 0010_1000
    reg[fe] = fe
exact 10 cycles
0058: read 2nd byte c4
  8b c4
    jr    , c4

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    fe       3f    =>    ff
         11111110 00111111 => 11111111
    flags = 0010_1000
    reg[55] = ff

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0051: read 1st byte 26
exact 10 cycles
0052: read 2nd byte ff
0053: read 3rd byte 08
  26 ff 08
    sub ff, #08

0054: read 1st byte 36
    alu:    a8       08    =>    a0
         10101000 00001000 => 10100000
    flags = 0010_1000
    reg[ff] = a0
exact 10 cycles
0055: read 2nd byte fe
0056: read 3rd byte 00
  36 fe 00
    sbc fe, #00

0057: read 1st byte 8b
    alu:    fe       00    =>    fe
         11111110 00000000 => 11111110
    flags = 0010_1000
    reg[fe] = fe
exact 10 cycles
0058: read 2nd byte c4
  8b c4
    jr    , c4

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    ff       3f    =>    00
         11111111 00111111 => 00000000
    flags = 0100_1000
    reg[55] = 00

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0059: read 1st byte 5c
exact 12 cycles
005a: read 2nd byte fd
  5c fd
    ld r5, #fd
    reg[55] = fd

005b: read 1st byte ff
exact  6 cycles
005c: read 2nd byte ff
  ff
    nop

005c: read 1st byte ff
exact  6 cycles
005d: read 2nd byte 4a
  ff
    nop

005d: read 1st byte 4a
exact  6 cycles
005e: read 2nd byte be
  4a be
    djnz r4, be
    reg[54] = 2b

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    fd       3f    =>    fe
         11111101 00111111 => 11111110
    flags = 0010_1000
    reg[55] = fe

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0051: read 1st byte 26
exact 10 cycles
0052: read 2nd byte ff
0053: read 3rd byte 08
  26 ff 08
    sub ff, #08

0054: read 1st byte 36
    alu:    b0       08    =>    a8
         10110000 00001000 => 10101000
    flags = 0010_1100
    reg[ff] = a8
exact 10 cycles
0055: read 2nd byte fe
0056: read 3rd byte 00
  36 fe 00
    sbc fe, #00

0057: read 1st byte 8b
    alu:    fe       00    =>    fe
         11111110 00000000 => 11111110
    flags = 0010_1000
    reg[fe] = fe
exact 10 cycles
0058: read 2nd byte c4
  8b c4
    jr    , c4

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    fe       3f    =>    ff
         11111110 00111111 => 11111111
    flags = 0010_1000
    reg[55] = ff

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0051: read 1st byte 26
exact 10 cycles
0052: read 2nd byte ff
0053: read 3rd byte 08
  26 ff 08
    sub ff, #08

0054: read 1st byte 36
    alu:    b0       08    =>    a8
         10110000 00001000 => 10101000
    flags = 0010_1100
    reg[ff] = a8
exact 10 cycles
0055: read 2nd byte fe
0056: read 3rd byte 00
  36 fe 00
    sbc fe, #00

0057: read 1st byte 8b
    alu:    fe       00    =>    fe
         11111110 00000000 => 11111110
    flags = 0010_1000
    reg[fe] = fe
exact 10 cycles
0058: read 2nd byte c4
  8b c4
    jr    , c4

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    ff       3f    =>    00
         11111111 00111111 => 00000000
    flags = 0100_1000
    reg[55] = 00

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0059: read 1st byte 5c
exact 12 cycles
005a: read 2nd byte fd
  5c fd
    ld r5, #fd
    reg[55] = fd

005b: read 1st byte ff
exact  6 cycles
005c: read 2nd byte ff
  ff
    nop

005c: read 1st byte ff
exact  6 cycles
005d: read 2nd byte 4a
  ff
    nop

005d: read 1st byte 4a
exact  6 cycles
005e: read 2nd byte be
  4a be
    djnz r4, be
    reg[54] = 2a

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    fd       3f    =>    fe
         11111101 00111111 => 11111110
    flags = 0010_1000
    reg[55] = fe

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0051: read 1st byte 26
exact 10 cycles
0052: read 2nd byte ff
0053: read 3rd byte 08
  26 ff 08
    sub ff, #08

0054: read 1st byte 36
    alu:    b8       08    =>    b0
         10111000 00001000 => 10110000
    flags = 0010_1000
    reg[ff] = b0
exact 10 cycles
0055: read 2nd byte fe
0056: read 3rd byte 00
  36 fe 00
    sbc fe, #00

0057: read 1st byte 8b
    alu:    fe       00    =>    fe
         11111110 00000000 => 11111110
    flags = 0010_1000
    reg[fe] = fe
exact 10 cycles
0058: read 2nd byte c4
  8b c4
    jr    , c4

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    fe       3f    =>    ff
         11111110 00111111 => 11111111
    flags = 0010_1000
    reg[55] = ff

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0051: read 1st byte 26
exact 10 cycles
0052: read 2nd byte ff
0053: read 3rd byte 08
  26 ff 08
    sub ff, #08

0054: read 1st byte 36
    alu:    b8       08    =>    b0
         10111000 00001000 => 10110000
    flags = 0010_1000
    reg[ff] = b0
exact 10 cycles
0055: read 2nd byte fe
0056: read 3rd byte 00
  36 fe 00
    sbc fe, #00

0057: read 1st byte 8b
    alu:    fe       00    =>    fe
         11111110 00000000 => 11111110
    flags = 0010_1000
    reg[fe] = fe
exact 10 cycles
0058: read 2nd byte c4
  8b c4
    jr    , c4

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    ff       3f    =>    00
         11111111 00111111 => 00000000
    flags = 0100_1000
    reg[55] = 00

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0059: read 1st byte 5c
exact 12 cycles
005a: read 2nd byte fd
  5c fd
    ld r5, #fd
    reg[55] = fd

005b: read 1st byte ff
exact  6 cycles
005c: read 2nd byte ff
  ff
    nop

005c: read 1st byte ff
exact  6 cycles
005d: read 2nd byte 4a
  ff
    nop

005d: read 1st byte 4a
exact  6 cycles
005e: read 2nd byte be
  4a be
    djnz r4, be
    reg[54] = 29

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    fd       3f    =>    fe
         11111101 00111111 => 11111110
    flags = 0010_1000
    reg[55] = fe

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0051: read 1st byte 26
exact 10 cycles
0052: read 2nd byte ff
0053: read 3rd byte 08
  26 ff 08
    sub ff, #08

0054: read 1st byte 36
    alu:    c0       08    =>    b8
         11000000 00001000 => 10111000
    flags = 0010_1100
    reg[ff] = b8
exact 10 cycles
0055: read 2nd byte fe
0056: read 3rd byte 00
  36 fe 00
    sbc fe, #00

0057: read 1st byte 8b
    alu:    fe       00    =>    fe
         11111110 00000000 => 11111110
    flags = 0010_1000
    reg[fe] = fe
exact 10 cycles
0058: read 2nd byte c4
  8b c4
    jr    , c4

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    fe       3f    =>    ff
         11111110 00111111 => 11111111
    flags = 0010_1000
    reg[55] = ff

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0051: read 1st byte 26
exact 10 cycles
0052: read 2nd byte ff
0053: read 3rd byte 08
  26 ff 08
    sub ff, #08

0054: read 1st byte 36
    alu:    c0       08    =>    b8
         11000000 00001000 => 10111000
    flags = 0010_1100
    reg[ff] = b8
exact 10 cycles
0055: read 2nd byte fe
0056: read 3rd byte 00
  36 fe 00
    sbc fe, #00

0057: read 1st byte 8b
    alu:    fe       00    =>    fe
         11111110 00000000 => 11111110
    flags = 0010_1000
    reg[fe] = fe
exact 10 cycles
0058: read 2nd byte c4
  8b c4
    jr    , c4

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    ff       3f    =>    00
         11111111 00111111 => 00000000
    flags = 0100_1000
    reg[55] = 00

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0059: read 1st byte 5c
exact 12 cycles
005a: read 2nd byte fd
  5c fd
    ld r5, #fd
    reg[55] = fd

005b: read 1st byte ff
exact  6 cycles
005c: read 2nd byte ff
  ff
    nop

005c: read 1st byte ff
exact  6 cycles
005d: read 2nd byte 4a
  ff
    nop

005d: read 1st byte 4a
exact  6 cycles
005e: read 2nd byte be
  4a be
    djnz r4, be
    reg[54] = 28

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    fd       3f    =>    fe
         11111101 00111111 => 11111110
    flags = 0010_1000
    reg[55] = fe

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0051: read 1st byte 26
exact 10 cycles
0052: read 2nd byte ff
0053: read 3rd byte 08
  26 ff 08
    sub ff, #08

0054: read 1st byte 36
    alu:    c8       08    =>    c0
         11001000 00001000 => 11000000
    flags = 0010_1000
    reg[ff] = c0
exact 10 cycles
0055: read 2nd byte fe
0056: read 3rd byte 00
  36 fe 00
    sbc fe, #00

0057: read 1st byte 8b
    alu:    fe       00    =>    fe
         11111110 00000000 => 11111110
    flags = 0010_1000
    reg[fe] = fe
exact 10 cycles
0058: read 2nd byte c4
  8b c4
    jr    , c4

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    fe       3f    =>    ff
         11111110 00111111 => 11111111
    flags = 0010_1000
    reg[55] = ff

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0051: read 1st byte 26
exact 10 cycles
0052: read 2nd byte ff
0053: read 3rd byte 08
  26 ff 08
    sub ff, #08

0054: read 1st byte 36
    alu:    c8       08    =>    c0
         11001000 00001000 => 11000000
    flags = 0010_1000
    reg[ff] = c0
exact 10 cycles
0055: read 2nd byte fe
0056: read 3rd byte 00
  36 fe 00
    sbc fe, #00

0057: read 1st byte 8b
    alu:    fe       00    =>    fe
         11111110 00000000 => 11111110
    flags = 0010_1000
    reg[fe] = fe
exact 10 cycles
0058: read 2nd byte c4
  8b c4
    jr    , c4

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    ff       3f    =>    00
         11111111 00111111 => 00000000
    flags = 0100_1000
    reg[55] = 00

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0059: read 1st byte 5c
exact 12 cycles
005a: read 2nd byte fd
  5c fd
    ld r5, #fd
    reg[55] = fd

005b: read 1st byte ff
exact  6 cycles
005c: read 2nd byte ff
  ff
    nop

005c: read 1st byte ff
exact  6 cycles
005d: read 2nd byte 4a
  ff
    nop

005d: read 1st byte 4a
exact  6 cycles
005e: read 2nd byte be
  4a be
    djnz r4, be
    reg[54] = 27

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    fd       3f    =>    fe
         11111101 00111111 => 11111110
    flags = 0010_1000
    reg[55] = fe

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0051: read 1st byte 26
exact 10 cycles
0052: read 2nd byte ff
0053: read 3rd byte 08
  26 ff 08
    sub ff, #08

0054: read 1st byte 36
    alu:    d0       08    =>    c8
         11010000 00001000 => 11001000
    flags = 0010_1100
    reg[ff] = c8
exact 10 cycles
0055: read 2nd byte fe
0056: read 3rd byte 00
  36 fe 00
    sbc fe, #00

0057: read 1st byte 8b
    alu:    fe       00    =>    fe
         11111110 00000000 => 11111110
    flags = 0010_1000
    reg[fe] = fe
exact 10 cycles
0058: read 2nd byte c4
  8b c4
    jr    , c4

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    fe       3f    =>    ff
         11111110 00111111 => 11111111
    flags = 0010_1000
    reg[55] = ff

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0051: read 1st byte 26
exact 10 cycles
0052: read 2nd byte ff
0053: read 3rd byte 08
  26 ff 08
    sub ff, #08

0054: read 1st byte 36
    alu:    d0       08    =>    c8
         11010000 00001000 => 11001000
    flags = 0010_1100
    reg[ff] = c8
exact 10 cycles
0055: read 2nd byte fe
0056: read 3rd byte 00
  36 fe 00
    sbc fe, #00

0057: read 1st byte 8b
    alu:    fe       00    =>    fe
         11111110 00000000 => 11111110
    flags = 0010_1000
    reg[fe] = fe
exact 10 cycles
0058: read 2nd byte c4
  8b c4
    jr    , c4

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    ff       3f    =>    00
         11111111 00111111 => 00000000
    flags = 0100_1000
    reg[55] = 00

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0059: read 1st byte 5c
exact 12 cycles
005a: read 2nd byte fd
  5c fd
    ld r5, #fd
    reg[55] = fd

005b: read 1st byte ff
exact  6 cycles
005c: read 2nd byte ff
  ff
    nop

005c: read 1st byte ff
exact  6 cycles
005d: read 2nd byte 4a
  ff
    nop

005d: read 1st byte 4a
exact  6 cycles
005e: read 2nd byte be
  4a be
    djnz r4, be
    reg[54] = 26

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    fd       3f    =>    fe
         11111101 00111111 => 11111110
    flags = 0010_1000
    reg[55] = fe

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0051: read 1st byte 26
exact 10 cycles
0052: read 2nd byte ff
0053: read 3rd byte 08
  26 ff 08
    sub ff, #08

0054: read 1st byte 36
    alu:    d8       08    =>    d0
         11011000 00001000 => 11010000
    flags = 0010_1000
    reg[ff] = d0
exact 10 cycles
0055: read 2nd byte fe
0056: read 3rd byte 00
  36 fe 00
    sbc fe, #00

0057: read 1st byte 8b
    alu:    fe       00    =>    fe
         11111110 00000000 => 11111110
    flags = 0010_1000
    reg[fe] = fe
exact 10 cycles
0058: read 2nd byte c4
  8b c4
    jr    , c4

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    fe       3f    =>    ff
         11111110 00111111 => 11111111
    flags = 0010_1000
    reg[55] = ff

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0051: read 1st byte 26
exact 10 cycles
0052: read 2nd byte ff
0053: read 3rd byte 08
  26 ff 08
    sub ff, #08

0054: read 1st byte 36
    alu:    d8       08    =>    d0
         11011000 00001000 => 11010000
    flags = 0010_1000
    reg[ff] = d0
exact 10 cycles
0055: read 2nd byte fe
0056: read 3rd byte 00
  36 fe 00
    sbc fe, #00

0057: read 1st byte 8b
    alu:    fe       00    =>    fe
         11111110 00000000 => 11111110
    flags = 0010_1000
    reg[fe] = fe
exact 10 cycles
0058: read 2nd byte c4
  8b c4
    jr    , c4

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    ff       3f    =>    00
         11111111 00111111 => 00000000
    flags = 0100_1000
    reg[55] = 00

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0059: read 1st byte 5c
exact 12 cycles
005a: read 2nd byte fd
  5c fd
    ld r5, #fd
    reg[55] = fd

005b: read 1st byte ff
exact  6 cycles
005c: read 2nd byte ff
  ff
    nop

005c: read 1st byte ff
exact  6 cycles
005d: read 2nd byte 4a
  ff
    nop

005d: read 1st byte 4a
exact  6 cycles
005e: read 2nd byte be
  4a be
    djnz r4, be
    reg[54] = 25

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    fd       3f    =>    fe
         11111101 00111111 => 11111110
    flags = 0010_1000
    reg[55] = fe

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0051: read 1st byte 26
exact 10 cycles
0052: read 2nd byte ff
0053: read 3rd byte 08
  26 ff 08
    sub ff, #08

0054: read 1st byte 36
    alu:    e0       08    =>    d8
         11100000 00001000 => 11011000
    flags = 0010_1100
    reg[ff] = d8
exact 10 cycles
0055: read 2nd byte fe
0056: read 3rd byte 00
  36 fe 00
    sbc fe, #00

0057: read 1st byte 8b
    alu:    fe       00    =>    fe
         11111110 00000000 => 11111110
    flags = 0010_1000
    reg[fe] = fe
exact 10 cycles
0058: read 2nd byte c4
  8b c4
    jr    , c4

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    fe       3f    =>    ff
         11111110 00111111 => 11111111
    flags = 0010_1000
    reg[55] = ff

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0051: read 1st byte 26
exact 10 cycles
0052: read 2nd byte ff
0053: read 3rd byte 08
  26 ff 08
    sub ff, #08

0054: read 1st byte 36
    alu:    e0       08    =>    d8
         11100000 00001000 => 11011000
    flags = 0010_1100
    reg[ff] = d8
exact 10 cycles
0055: read 2nd byte fe
0056: read 3rd byte 00
  36 fe 00
    sbc fe, #00

0057: read 1st byte 8b
    alu:    fe       00    =>    fe
         11111110 00000000 => 11111110
    flags = 0010_1000
    reg[fe] = fe
exact 10 cycles
0058: read 2nd byte c4
  8b c4
    jr    , c4

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    ff       3f    =>    00
         11111111 00111111 => 00000000
    flags = 0100_1000
    reg[55] = 00

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0059: read 1st byte 5c
exact 12 cycles
005a: read 2nd byte fd
  5c fd
    ld r5, #fd
    reg[55] = fd

005b: read 1st byte ff
exact  6 cycles
005c: read 2nd byte ff
  ff
    nop

005c: read 1st byte ff
exact  6 cycles
005d: read 2nd byte 4a
  ff
    nop

005d: read 1st byte 4a
exact  6 cycles
005e: read 2nd byte be
  4a be
    djnz r4, be
    reg[54] = 24

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    fd       3f    =>    fe
         11111101 00111111 => 11111110
    flags = 0010_1000
    reg[55] = fe

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0051: read 1st byte 26
exact 10 cycles
0052: read 2nd byte ff
0053: read 3rd byte 08
  26 ff 08
    sub ff, #08

0054: read 1st byte 36
    alu:    e8       08    =>    e0
         11101000 00001000 => 11100000
    flags = 0010_1000
    reg[ff] = e0
exact 10 cycles
0055: read 2nd byte fe
0056: read 3rd byte 00
  36 fe 00
    sbc fe, #00

0057: read 1st byte 8b
    alu:    fe       00    =>    fe
         11111110 00000000 => 11111110
    flags = 0010_1000
    reg[fe] = fe
exact 10 cycles
0058: read 2nd byte c4
  8b c4
    jr    , c4

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    fe       3f    =>    ff
         11111110 00111111 => 11111111
    flags = 0010_1000
    reg[55] = ff

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0051: read 1st byte 26
exact 10 cycles
0052: read 2nd byte ff
0053: read 3rd byte 08
  26 ff 08
    sub ff, #08

0054: read 1st byte 36
    alu:    e8       08    =>    e0
         11101000 00001000 => 11100000
    flags = 0010_1000
    reg[ff] = e0
exact 10 cycles
0055: read 2nd byte fe
0056: read 3rd byte 00
  36 fe 00
    sbc fe, #00

0057: read 1st byte 8b
    alu:    fe       00    =>    fe
         11111110 00000000 => 11111110
    flags = 0010_1000
    reg[fe] = fe
exact 10 cycles
0058: read 2nd byte c4
  8b c4
    jr    , c4

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    ff       3f    =>    00
         11111111 00111111 => 00000000
    flags = 0100_1000
    reg[55] = 00

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0059: read 1st byte 5c
exact 12 cycles
005a: read 2nd byte fd
  5c fd
    ld r5, #fd
    reg[55] = fd

005b: read 1st byte ff
exact  6 cycles
005c: read 2nd byte ff
  ff
    nop

005c: read 1st byte ff
exact  6 cycles
005d: read 2nd byte 4a
  ff
    nop

005d: read 1st byte 4a
exact  6 cycles
005e: read 2nd byte be
  4a be
    djnz r4, be
    reg[54] = 23

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    fd       3f    =>    fe
         11111101 00111111 => 11111110
    flags = 0010_1000
    reg[55] = fe

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0051: read 1st byte 26
exact 10 cycles
0052: read 2nd byte ff
0053: read 3rd byte 08
  26 ff 08
    sub ff, #08

0054: read 1st byte 36
    alu:    f0       08    =>    e8
         11110000 00001000 => 11101000
    flags = 0010_1100
    reg[ff] = e8
exact 10 cycles
0055: read 2nd byte fe
0056: read 3rd byte 00
  36 fe 00
    sbc fe, #00

0057: read 1st byte 8b
    alu:    fe       00    =>    fe
         11111110 00000000 => 11111110
    flags = 0010_1000
    reg[fe] = fe
exact 10 cycles
0058: read 2nd byte c4
  8b c4
    jr    , c4

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    fe       3f    =>    ff
         11111110 00111111 => 11111111
    flags = 0010_1000
    reg[55] = ff

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0051: read 1st byte 26
exact 10 cycles
0052: read 2nd byte ff
0053: read 3rd byte 08
  26 ff 08
    sub ff, #08

0054: read 1st byte 36
    alu:    f0       08    =>    e8
         11110000 00001000 => 11101000
    flags = 0010_1100
    reg[ff] = e8
exact 10 cycles
0055: read 2nd byte fe
0056: read 3rd byte 00
  36 fe 00
    sbc fe, #00

0057: read 1st byte 8b
    alu:    fe       00    =>    fe
         11111110 00000000 => 11111110
    flags = 0010_1000
    reg[fe] = fe
exact 10 cycles
0058: read 2nd byte c4
  8b c4
    jr    , c4

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    ff       3f    =>    00
         11111111 00111111 => 00000000
    flags = 0100_1000
    reg[55] = 00

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0059: read 1st byte 5c
exact 12 cycles
005a: read 2nd byte fd
  5c fd
    ld r5, #fd
    reg[55] = fd

005b: read 1st byte ff
exact  6 cycles
005c: read 2nd byte ff
  ff
    nop

005c: read 1st byte ff
exact  6 cycles
005d: read 2nd byte 4a
  ff
    nop

005d: read 1st byte 4a
exact  6 cycles
005e: read 2nd byte be
  4a be
    djnz r4, be
    reg[54] = 22

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    fd       3f    =>    fe
         11111101 00111111 => 11111110
    flags = 0010_1000
    reg[55] = fe

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0051: read 1st byte 26
exact 10 cycles
0052: read 2nd byte ff
0053: read 3rd byte 08
  26 ff 08
    sub ff, #08

0054: read 1st byte 36
    alu:    f8       08    =>    f0
         11111000 00001000 => 11110000
    flags = 0010_1000
    reg[ff] = f0
exact 10 cycles
0055: read 2nd byte fe
0056: read 3rd byte 00
  36 fe 00
    sbc fe, #00

0057: read 1st byte 8b
    alu:    fe       00    =>    fe
         11111110 00000000 => 11111110
    flags = 0010_1000
    reg[fe] = fe
exact 10 cycles
0058: read 2nd byte c4
  8b c4
    jr    , c4

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    fe       3f    =>    ff
         11111110 00111111 => 11111111
    flags = 0010_1000
    reg[55] = ff

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0051: read 1st byte 26
exact 10 cycles
0052: read 2nd byte ff
0053: read 3rd byte 08
  26 ff 08
    sub ff, #08

0054: read 1st byte 36
    alu:    f8       08    =>    f0
         11111000 00001000 => 11110000
    flags = 0010_1000
    reg[ff] = f0
exact 10 cycles
0055: read 2nd byte fe
0056: read 3rd byte 00
  36 fe 00
    sbc fe, #00

0057: read 1st byte 8b
    alu:    fe       00    =>    fe
         11111110 00000000 => 11111110
    flags = 0010_1000
    reg[fe] = fe
exact 10 cycles
0058: read 2nd byte c4
  8b c4
    jr    , c4

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    ff       3f    =>    00
         11111111 00111111 => 00000000
    flags = 0100_1000
    reg[55] = 00

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0059: read 1st byte 5c
exact 12 cycles
005a: read 2nd byte fd
  5c fd
    ld r5, #fd
    reg[55] = fd

005b: read 1st byte ff
exact  6 cycles
005c: read 2nd byte ff
  ff
    nop

005c: read 1st byte ff
exact  6 cycles
005d: read 2nd byte 4a
  ff
    nop

005d: read 1st byte 4a
exact  6 cycles
005e: read 2nd byte be
  4a be
    djnz r4, be
    reg[54] = 21

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    fd       3f    =>    fe
         11111101 00111111 => 11111110
    flags = 0010_1000
    reg[55] = fe

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0051: read 1st byte 26
exact 10 cycles
0052: read 2nd byte ff
0053: read 3rd byte 08
  26 ff 08
    sub ff, #08

0054: read 1st byte 36
    alu:    00       08    =>    f8
         00000000 00001000 => 11111000
    flags = 1011_1100
    reg[ff] = f8
exact 10 cycles
0055: read 2nd byte fe
0056: read 3rd byte 00
  36 fe 00
    sbc fe, #00

0057: read 1st byte 8b
    alu:    ff       00    =>    fe
         11111111 00000000 => 11111110
    flags = 0010_1000
    reg[fe] = fe
exact 10 cycles
0058: read 2nd byte c4
  8b c4
    jr    , c4

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    fe       3f    =>    ff
         11111110 00111111 => 11111111
    flags = 0010_1000
    reg[55] = ff

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0051: read 1st byte 26
exact 10 cycles
0052: read 2nd byte ff
0053: read 3rd byte 08
  26 ff 08
    sub ff, #08

0054: read 1st byte 36
    alu:    00       08    =>    f8
         00000000 00001000 => 11111000
    flags = 1011_1100
    reg[ff] = f8
exact 10 cycles
0055: read 2nd byte fe
0056: read 3rd byte 00
  36 fe 00
    sbc fe, #00

0057: read 1st byte 8b
    alu:    ff       00    =>    fe
         11111111 00000000 => 11111110
    flags = 0010_1000
    reg[fe] = fe
exact 10 cycles
0058: read 2nd byte c4
  8b c4
    jr    , c4

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    ff       3f    =>    00
         11111111 00111111 => 00000000
    flags = 0100_1000
    reg[55] = 00

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0059: read 1st byte 5c
exact 12 cycles
005a: read 2nd byte fd
  5c fd
    ld r5, #fd
    reg[55] = fd

005b: read 1st byte ff
exact  6 cycles
005c: read 2nd byte ff
  ff
    nop

005c: read 1st byte ff
exact  6 cycles
005d: read 2nd byte 4a
  ff
    nop

005d: read 1st byte 4a
exact  6 cycles
005e: read 2nd byte be
  4a be
    djnz r4, be
    reg[54] = 20

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    fd       3f    =>    fe
         11111101 00111111 => 11111110
    flags = 0010_1000
    reg[55] = fe

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0051: read 1st byte 26
exact 10 cycles
0052: read 2nd byte ff
0053: read 3rd byte 08
  26 ff 08
    sub ff, #08

0054: read 1st byte 36
    alu:    08       08    =>    00
         00001000 00001000 => 00000000
    flags = 0100_1000
    reg[ff] = 00
exact 10 cycles
0055: read 2nd byte fe
0056: read 3rd byte 00
  36 fe 00
    sbc fe, #00

0057: read 1st byte 8b
    alu:    ff       00    =>    ff
         11111111 00000000 => 11111111
    flags = 0010_1000
    reg[fe] = ff
exact 10 cycles
0058: read 2nd byte c4
  8b c4
    jr    , c4

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    fe       3f    =>    ff
         11111110 00111111 => 11111111
    flags = 0010_1000
    reg[55] = ff

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0051: read 1st byte 26
exact 10 cycles
0052: read 2nd byte ff
0053: read 3rd byte 08
  26 ff 08
    sub ff, #08

0054: read 1st byte 36
    alu:    08       08    =>    00
         00001000 00001000 => 00000000
    flags = 0100_1000
    reg[ff] = 00
exact 10 cycles
0055: read 2nd byte fe
0056: read 3rd byte 00
  36 fe 00
    sbc fe, #00

0057: read 1st byte 8b
    alu:    ff       00    =>    ff
         11111111 00000000 => 11111111
    flags = 0010_1000
    reg[fe] = ff
exact 10 cycles
0058: read 2nd byte c4
  8b c4
    jr    , c4

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    ff       3f    =>    00
         11111111 00111111 => 00000000
    flags = 0100_1000
    reg[55] = 00

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0059: read 1st byte 5c
exact 12 cycles
005a: read 2nd byte fd
  5c fd
    ld r5, #fd
    reg[55] = fd

005b: read 1st byte ff
exact  6 cycles
005c: read 2nd byte ff
  ff
    nop

005c: read 1st byte ff
exact  6 cycles
005d: read 2nd byte 4a
  ff
    nop

005d: read 1st byte 4a
exact  6 cycles
005e: read 2nd byte be
  4a be
    djnz r4, be
    reg[54] = 1f

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    fd       3f    =>    fe
         11111101 00111111 => 11111110
    flags = 0010_1000
    reg[55] = fe

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0051: read 1st byte 26
exact 10 cycles
0052: read 2nd byte ff
0053: read 3rd byte 08
  26 ff 08
    sub ff, #08

0054: read 1st byte 36
    alu:    10       08    =>    08
         00010000 00001000 => 00001000
    flags = 0000_1100
    reg[ff] = 08
exact 10 cycles
0055: read 2nd byte fe
0056: read 3rd byte 00
  36 fe 00
    sbc fe, #00

0057: read 1st byte 8b
    alu:    ff       00    =>    ff
         11111111 00000000 => 11111111
    flags = 0010_1000
    reg[fe] = ff
exact 10 cycles
0058: read 2nd byte c4
  8b c4
    jr    , c4

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    fe       3f    =>    ff
         11111110 00111111 => 11111111
    flags = 0010_1000
    reg[55] = ff

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0051: read 1st byte 26
exact 10 cycles
0052: read 2nd byte ff
0053: read 3rd byte 08
  26 ff 08
    sub ff, #08

0054: read 1st byte 36
    alu:    10       08    =>    08
         00010000 00001000 => 00001000
    flags = 0000_1100
    reg[ff] = 08
exact 10 cycles
0055: read 2nd byte fe
0056: read 3rd byte 00
  36 fe 00
    sbc fe, #00

0057: read 1st byte 8b
    alu:    ff       00    =>    ff
         11111111 00000000 => 11111111
    flags = 0010_1000
    reg[fe] = ff
exact 10 cycles
0058: read 2nd byte c4
  8b c4
    jr    , c4

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    ff       3f    =>    00
         11111111 00111111 => 00000000
    flags = 0100_1000
    reg[55] = 00

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0059: read 1st byte 5c
exact 12 cycles
005a: read 2nd byte fd
  5c fd
    ld r5, #fd
    reg[55] = fd

005b: read 1st byte ff
exact  6 cycles
005c: read 2nd byte ff
  ff
    nop

005c: read 1st byte ff
exact  6 cycles
005d: read 2nd byte 4a
  ff
    nop

005d: read 1st byte 4a
exact  6 cycles
005e: read 2nd byte be
  4a be
    djnz r4, be
    reg[54] = 1e

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    fd       3f    =>    fe
         11111101 00111111 => 11111110
    flags = 0010_1000
    reg[55] = fe

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0051: read 1st byte 26
exact 10 cycles
0052: read 2nd byte ff
0053: read 3rd byte 08
  26 ff 08
    sub ff, #08

0054: read 1st byte 36
    alu:    18       08    =>    10
         00011000 00001000 => 00010000
    flags = 0000_1000
    reg[ff] = 10
exact 10 cycles
0055: read 2nd byte fe
0056: read 3rd byte 00
  36 fe 00
    sbc fe, #00

0057: read 1st byte 8b
    alu:    ff       00    =>    ff
         11111111 00000000 => 11111111
    flags = 0010_1000
    reg[fe] = ff
exact 10 cycles
0058: read 2nd byte c4
  8b c4
    jr    , c4

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    fe       3f    =>    ff
         11111110 00111111 => 11111111
    flags = 0010_1000
    reg[55] = ff

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0051: read 1st byte 26
exact 10 cycles
0052: read 2nd byte ff
0053: read 3rd byte 08
  26 ff 08
    sub ff, #08

0054: read 1st byte 36
    alu:    18       08    =>    10
         00011000 00001000 => 00010000
    flags = 0000_1000
    reg[ff] = 10
exact 10 cycles
0055: read 2nd byte fe
0056: read 3rd byte 00
  36 fe 00
    sbc fe, #00

0057: read 1st byte 8b
    alu:    ff       00    =>    ff
         11111111 00000000 => 11111111
    flags = 0010_1000
    reg[fe] = ff
exact 10 cycles
0058: read 2nd byte c4
  8b c4
    jr    , c4

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    ff       3f    =>    00
         11111111 00111111 => 00000000
    flags = 0100_1000
    reg[55] = 00

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0059: read 1st byte 5c
exact 12 cycles
005a: read 2nd byte fd
  5c fd
    ld r5, #fd
    reg[55] = fd

005b: read 1st byte ff
exact  6 cycles
005c: read 2nd byte ff
  ff
    nop

005c: read 1st byte ff
exact  6 cycles
005d: read 2nd byte 4a
  ff
    nop

005d: read 1st byte 4a
exact  6 cycles
005e: read 2nd byte be
  4a be
    djnz r4, be
    reg[54] = 1d

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    fd       3f    =>    fe
         11111101 00111111 => 11111110
    flags = 0010_1000
    reg[55] = fe

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0051: read 1st byte 26
exact 10 cycles
0052: read 2nd byte ff
0053: read 3rd byte 08
  26 ff 08
    sub ff, #08

0054: read 1st byte 36
    alu:    20       08    =>    18
         00100000 00001000 => 00011000
    flags = 0000_1100
    reg[ff] = 18
exact 10 cycles
0055: read 2nd byte fe
0056: read 3rd byte 00
  36 fe 00
    sbc fe, #00

0057: read 1st byte 8b
    alu:    ff       00    =>    ff
         11111111 00000000 => 11111111
    flags = 0010_1000
    reg[fe] = ff
exact 10 cycles
0058: read 2nd byte c4
  8b c4
    jr    , c4

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    fe       3f    =>    ff
         11111110 00111111 => 11111111
    flags = 0010_1000
    reg[55] = ff

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0051: read 1st byte 26
exact 10 cycles
0052: read 2nd byte ff
0053: read 3rd byte 08
  26 ff 08
    sub ff, #08

0054: read 1st byte 36
    alu:    20       08    =>    18
         00100000 00001000 => 00011000
    flags = 0000_1100
    reg[ff] = 18
exact 10 cycles
0055: read 2nd byte fe
0056: read 3rd byte 00
  36 fe 00
    sbc fe, #00

0057: read 1st byte 8b
    alu:    ff       00    =>    ff
         11111111 00000000 => 11111111
    flags = 0010_1000
    reg[fe] = ff
exact 10 cycles
0058: read 2nd byte c4
  8b c4
    jr    , c4

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    ff       3f    =>    00
         11111111 00111111 => 00000000
    flags = 0100_1000
    reg[55] = 00

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0059: read 1st byte 5c
exact 12 cycles
005a: read 2nd byte fd
  5c fd
    ld r5, #fd
    reg[55] = fd

005b: read 1st byte ff
exact  6 cycles
005c: read 2nd byte ff
  ff
    nop

005c: read 1st byte ff
exact  6 cycles
005d: read 2nd byte 4a
  ff
    nop

005d: read 1st byte 4a
exact  6 cycles
005e: read 2nd byte be
  4a be
    djnz r4, be
    reg[54] = 1c

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    fd       3f    =>    fe
         11111101 00111111 => 11111110
    flags = 0010_1000
    reg[55] = fe

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0051: read 1st byte 26
exact 10 cycles
0052: read 2nd byte ff
0053: read 3rd byte 08
  26 ff 08
    sub ff, #08

0054: read 1st byte 36
    alu:    28       08    =>    20
         00101000 00001000 => 00100000
    flags = 0000_1000
    reg[ff] = 20
exact 10 cycles
0055: read 2nd byte fe
0056: read 3rd byte 00
  36 fe 00
    sbc fe, #00

0057: read 1st byte 8b
    alu:    ff       00    =>    ff
         11111111 00000000 => 11111111
    flags = 0010_1000
    reg[fe] = ff
exact 10 cycles
0058: read 2nd byte c4
  8b c4
    jr    , c4

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    fe       3f    =>    ff
         11111110 00111111 => 11111111
    flags = 0010_1000
    reg[55] = ff

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0051: read 1st byte 26
exact 10 cycles
0052: read 2nd byte ff
0053: read 3rd byte 08
  26 ff 08
    sub ff, #08

0054: read 1st byte 36
    alu:    28       08    =>    20
         00101000 00001000 => 00100000
    flags = 0000_1000
    reg[ff] = 20
exact 10 cycles
0055: read 2nd byte fe
0056: read 3rd byte 00
  36 fe 00
    sbc fe, #00

0057: read 1st byte 8b
    alu:    ff       00    =>    ff
         11111111 00000000 => 11111111
    flags = 0010_1000
    reg[fe] = ff
exact 10 cycles
0058: read 2nd byte c4
  8b c4
    jr    , c4

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    ff       3f    =>    00
         11111111 00111111 => 00000000
    flags = 0100_1000
    reg[55] = 00

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0059: read 1st byte 5c
exact 12 cycles
005a: read 2nd byte fd
  5c fd
    ld r5, #fd
    reg[55] = fd

005b: read 1st byte ff
exact  6 cycles
005c: read 2nd byte ff
  ff
    nop

005c: read 1st byte ff
exact  6 cycles
005d: read 2nd byte 4a
  ff
    nop

005d: read 1st byte 4a
exact  6 cycles
005e: read 2nd byte be
  4a be
    djnz r4, be
    reg[54] = 1b

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    fd       3f    =>    fe
         11111101 00111111 => 11111110
    flags = 0010_1000
    reg[55] = fe

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0051: read 1st byte 26
exact 10 cycles
0052: read 2nd byte ff
0053: read 3rd byte 08
  26 ff 08
    sub ff, #08

0054: read 1st byte 36
    alu:    30       08    =>    28
         00110000 00001000 => 00101000
    flags = 0000_1100
    reg[ff] = 28
exact 10 cycles
0055: read 2nd byte fe
0056: read 3rd byte 00
  36 fe 00
    sbc fe, #00

0057: read 1st byte 8b
    alu:    ff       00    =>    ff
         11111111 00000000 => 11111111
    flags = 0010_1000
    reg[fe] = ff
exact 10 cycles
0058: read 2nd byte c4
  8b c4
    jr    , c4

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    fe       3f    =>    ff
         11111110 00111111 => 11111111
    flags = 0010_1000
    reg[55] = ff

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0051: read 1st byte 26
exact 10 cycles
0052: read 2nd byte ff
0053: read 3rd byte 08
  26 ff 08
    sub ff, #08

0054: read 1st byte 36
    alu:    30       08    =>    28
         00110000 00001000 => 00101000
    flags = 0000_1100
    reg[ff] = 28
exact 10 cycles
0055: read 2nd byte fe
0056: read 3rd byte 00
  36 fe 00
    sbc fe, #00

0057: read 1st byte 8b
    alu:    ff       00    =>    ff
         11111111 00000000 => 11111111
    flags = 0010_1000
    reg[fe] = ff
exact 10 cycles
0058: read 2nd byte c4
  8b c4
    jr    , c4

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    ff       3f    =>    00
         11111111 00111111 => 00000000
    flags = 0100_1000
    reg[55] = 00

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0059: read 1st byte 5c
exact 12 cycles
005a: read 2nd byte fd
  5c fd
    ld r5, #fd
    reg[55] = fd

005b: read 1st byte ff
exact  6 cycles
005c: read 2nd byte ff
  ff
    nop

005c: read 1st byte ff
exact  6 cycles
005d: read 2nd byte 4a
  ff
    nop

005d: read 1st byte 4a
exact  6 cycles
005e: read 2nd byte be
  4a be
    djnz r4, be
    reg[54] = 1a

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    fd       3f    =>    fe
         11111101 00111111 => 11111110
    flags = 0010_1000
    reg[55] = fe

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0051: read 1st byte 26
exact 10 cycles
0052: read 2nd byte ff
0053: read 3rd byte 08
  26 ff 08
    sub ff, #08

0054: read 1st byte 36
    alu:    38       08    =>    30
         00111000 00001000 => 00110000
    flags = 0000_1000
    reg[ff] = 30
exact 10 cycles
0055: read 2nd byte fe
0056: read 3rd byte 00
  36 fe 00
    sbc fe, #00

0057: read 1st byte 8b
    alu:    ff       00    =>    ff
         11111111 00000000 => 11111111
    flags = 0010_1000
    reg[fe] = ff
exact 10 cycles
0058: read 2nd byte c4
  8b c4
    jr    , c4

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    fe       3f    =>    ff
         11111110 00111111 => 11111111
    flags = 0010_1000
    reg[55] = ff

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0051: read 1st byte 26
exact 10 cycles
0052: read 2nd byte ff
0053: read 3rd byte 08
  26 ff 08
    sub ff, #08

0054: read 1st byte 36
    alu:    38       08    =>    30
         00111000 00001000 => 00110000
    flags = 0000_1000
    reg[ff] = 30
exact 10 cycles
0055: read 2nd byte fe
0056: read 3rd byte 00
  36 fe 00
    sbc fe, #00

0057: read 1st byte 8b
    alu:    ff       00    =>    ff
         11111111 00000000 => 11111111
    flags = 0010_1000
    reg[fe] = ff
exact 10 cycles
0058: read 2nd byte c4
  8b c4
    jr    , c4

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    ff       3f    =>    00
         11111111 00111111 => 00000000
    flags = 0100_1000
    reg[55] = 00

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0059: read 1st byte 5c
exact 12 cycles
005a: read 2nd byte fd
  5c fd
    ld r5, #fd
    reg[55] = fd

005b: read 1st byte ff
exact  6 cycles
005c: read 2nd byte ff
  ff
    nop

005c: read 1st byte ff
exact  6 cycles
005d: read 2nd byte 4a
  ff
    nop

005d: read 1st byte 4a
exact  6 cycles
005e: read 2nd byte be
  4a be
    djnz r4, be
    reg[54] = 19

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    fd       3f    =>    fe
         11111101 00111111 => 11111110
    flags = 0010_1000
    reg[55] = fe

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0051: read 1st byte 26
exact 10 cycles
0052: read 2nd byte ff
0053: read 3rd byte 08
  26 ff 08
    sub ff, #08

0054: read 1st byte 36
    alu:    40       08    =>    38
         01000000 00001000 => 00111000
    flags = 0000_1100
    reg[ff] = 38
exact 10 cycles
0055: read 2nd byte fe
0056: read 3rd byte 00
  36 fe 00
    sbc fe, #00

0057: read 1st byte 8b
    alu:    ff       00    =>    ff
         11111111 00000000 => 11111111
    flags = 0010_1000
    reg[fe] = ff
exact 10 cycles
0058: read 2nd byte c4
  8b c4
    jr    , c4

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    fe       3f    =>    ff
         11111110 00111111 => 11111111
    flags = 0010_1000
    reg[55] = ff

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0051: read 1st byte 26
exact 10 cycles
0052: read 2nd byte ff
0053: read 3rd byte 08
  26 ff 08
    sub ff, #08

0054: read 1st byte 36
    alu:    40       08    =>    38
         01000000 00001000 => 00111000
    flags = 0000_1100
    reg[ff] = 38
exact 10 cycles
0055: read 2nd byte fe
0056: read 3rd byte 00
  36 fe 00
    sbc fe, #00

0057: read 1st byte 8b
    alu:    ff       00    =>    ff
         11111111 00000000 => 11111111
    flags = 0010_1000
    reg[fe] = ff
exact 10 cycles
0058: read 2nd byte c4
  8b c4
    jr    , c4

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    ff       3f    =>    00
         11111111 00111111 => 00000000
    flags = 0100_1000
    reg[55] = 00

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0059: read 1st byte 5c
exact 12 cycles
005a: read 2nd byte fd
  5c fd
    ld r5, #fd
    reg[55] = fd

005b: read 1st byte ff
exact  6 cycles
005c: read 2nd byte ff
  ff
    nop

005c: read 1st byte ff
exact  6 cycles
005d: read 2nd byte 4a
  ff
    nop

005d: read 1st byte 4a
exact  6 cycles
005e: read 2nd byte be
  4a be
    djnz r4, be
    reg[54] = 18

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    fd       3f    =>    fe
         11111101 00111111 => 11111110
    flags = 0010_1000
    reg[55] = fe

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0051: read 1st byte 26
exact 10 cycles
0052: read 2nd byte ff
0053: read 3rd byte 08
  26 ff 08
    sub ff, #08

0054: read 1st byte 36
    alu:    48       08    =>    40
         01001000 00001000 => 01000000
    flags = 0000_1000
    reg[ff] = 40
exact 10 cycles
0055: read 2nd byte fe
0056: read 3rd byte 00
  36 fe 00
    sbc fe, #00

0057: read 1st byte 8b
    alu:    ff       00    =>    ff
         11111111 00000000 => 11111111
    flags = 0010_1000
    reg[fe] = ff
exact 10 cycles
0058: read 2nd byte c4
  8b c4
    jr    , c4

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    fe       3f    =>    ff
         11111110 00111111 => 11111111
    flags = 0010_1000
    reg[55] = ff

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0051: read 1st byte 26
exact 10 cycles
0052: read 2nd byte ff
0053: read 3rd byte 08
  26 ff 08
    sub ff, #08

0054: read 1st byte 36
    alu:    48       08    =>    40
         01001000 00001000 => 01000000
    flags = 0000_1000
    reg[ff] = 40
exact 10 cycles
0055: read 2nd byte fe
0056: read 3rd byte 00
  36 fe 00
    sbc fe, #00

0057: read 1st byte 8b
    alu:    ff       00    =>    ff
         11111111 00000000 => 11111111
    flags = 0010_1000
    reg[fe] = ff
exact 10 cycles
0058: read 2nd byte c4
  8b c4
    jr    , c4

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    ff       3f    =>    00
         11111111 00111111 => 00000000
    flags = 0100_1000
    reg[55] = 00

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0059: read 1st byte 5c
exact 12 cycles
005a: read 2nd byte fd
  5c fd
    ld r5, #fd
    reg[55] = fd

005b: read 1st byte ff
exact  6 cycles
005c: read 2nd byte ff
  ff
    nop

005c: read 1st byte ff
exact  6 cycles
005d: read 2nd byte 4a
  ff
    nop

005d: read 1st byte 4a
exact  6 cycles
005e: read 2nd byte be
  4a be
    djnz r4, be
    reg[54] = 17

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    fd       3f    =>    fe
         11111101 00111111 => 11111110
    flags = 0010_1000
    reg[55] = fe

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0051: read 1st byte 26
exact 10 cycles
0052: read 2nd byte ff
0053: read 3rd byte 08
  26 ff 08
    sub ff, #08

0054: read 1st byte 36
    alu:    50       08    =>    48
         01010000 00001000 => 01001000
    flags = 0000_1100
    reg[ff] = 48
exact 10 cycles
0055: read 2nd byte fe
0056: read 3rd byte 00
  36 fe 00
    sbc fe, #00

0057: read 1st byte 8b
    alu:    ff       00    =>    ff
         11111111 00000000 => 11111111
    flags = 0010_1000
    reg[fe] = ff
exact 10 cycles
0058: read 2nd byte c4
  8b c4
    jr    , c4

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    fe       3f    =>    ff
         11111110 00111111 => 11111111
    flags = 0010_1000
    reg[55] = ff

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0051: read 1st byte 26
exact 10 cycles
0052: read 2nd byte ff
0053: read 3rd byte 08
  26 ff 08
    sub ff, #08

0054: read 1st byte 36
    alu:    50       08    =>    48
         01010000 00001000 => 01001000
    flags = 0000_1100
    reg[ff] = 48
exact 10 cycles
0055: read 2nd byte fe
0056: read 3rd byte 00
  36 fe 00
    sbc fe, #00

0057: read 1st byte 8b
    alu:    ff       00    =>    ff
         11111111 00000000 => 11111111
    flags = 0010_1000
    reg[fe] = ff
exact 10 cycles
0058: read 2nd byte c4
  8b c4
    jr    , c4

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    ff       3f    =>    00
         11111111 00111111 => 00000000
    flags = 0100_1000
    reg[55] = 00

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0059: read 1st byte 5c
exact 12 cycles
005a: read 2nd byte fd
  5c fd
    ld r5, #fd
    reg[55] = fd

005b: read 1st byte ff
exact  6 cycles
005c: read 2nd byte ff
  ff
    nop

005c: read 1st byte ff
exact  6 cycles
005d: read 2nd byte 4a
  ff
    nop

005d: read 1st byte 4a
exact  6 cycles
005e: read 2nd byte be
  4a be
    djnz r4, be
    reg[54] = 16

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    fd       3f    =>    fe
         11111101 00111111 => 11111110
    flags = 0010_1000
    reg[55] = fe

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0051: read 1st byte 26
exact 10 cycles
0052: read 2nd byte ff
0053: read 3rd byte 08
  26 ff 08
    sub ff, #08

0054: read 1st byte 36
    alu:    58       08    =>    50
         01011000 00001000 => 01010000
    flags = 0000_1000
    reg[ff] = 50
exact 10 cycles
0055: read 2nd byte fe
0056: read 3rd byte 00
  36 fe 00
    sbc fe, #00

0057: read 1st byte 8b
    alu:    ff       00    =>    ff
         11111111 00000000 => 11111111
    flags = 0010_1000
    reg[fe] = ff
exact 10 cycles
0058: read 2nd byte c4
  8b c4
    jr    , c4

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    fe       3f    =>    ff
         11111110 00111111 => 11111111
    flags = 0010_1000
    reg[55] = ff

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0051: read 1st byte 26
exact 10 cycles
0052: read 2nd byte ff
0053: read 3rd byte 08
  26 ff 08
    sub ff, #08

0054: read 1st byte 36
    alu:    58       08    =>    50
         01011000 00001000 => 01010000
    flags = 0000_1000
    reg[ff] = 50
exact 10 cycles
0055: read 2nd byte fe
0056: read 3rd byte 00
  36 fe 00
    sbc fe, #00

0057: read 1st byte 8b
    alu:    ff       00    =>    ff
         11111111 00000000 => 11111111
    flags = 0010_1000
    reg[fe] = ff
exact 10 cycles
0058: read 2nd byte c4
  8b c4
    jr    , c4

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    ff       3f    =>    00
         11111111 00111111 => 00000000
    flags = 0100_1000
    reg[55] = 00

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0059: read 1st byte 5c
exact 12 cycles
005a: read 2nd byte fd
  5c fd
    ld r5, #fd
    reg[55] = fd

005b: read 1st byte ff
exact  6 cycles
005c: read 2nd byte ff
  ff
    nop

005c: read 1st byte ff
exact  6 cycles
005d: read 2nd byte 4a
  ff
    nop

005d: read 1st byte 4a
exact  6 cycles
005e: read 2nd byte be
  4a be
    djnz r4, be
    reg[54] = 15

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    fd       3f    =>    fe
         11111101 00111111 => 11111110
    flags = 0010_1000
    reg[55] = fe

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0051: read 1st byte 26
exact 10 cycles
0052: read 2nd byte ff
0053: read 3rd byte 08
  26 ff 08
    sub ff, #08

0054: read 1st byte 36
    alu:    60       08    =>    58
         01100000 00001000 => 01011000
    flags = 0000_1100
    reg[ff] = 58
exact 10 cycles
0055: read 2nd byte fe
0056: read 3rd byte 00
  36 fe 00
    sbc fe, #00

0057: read 1st byte 8b
    alu:    ff       00    =>    ff
         11111111 00000000 => 11111111
    flags = 0010_1000
    reg[fe] = ff
exact 10 cycles
0058: read 2nd byte c4
  8b c4
    jr    , c4

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    fe       3f    =>    ff
         11111110 00111111 => 11111111
    flags = 0010_1000
    reg[55] = ff

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0051: read 1st byte 26
exact 10 cycles
0052: read 2nd byte ff
0053: read 3rd byte 08
  26 ff 08
    sub ff, #08

0054: read 1st byte 36
    alu:    60       08    =>    58
         01100000 00001000 => 01011000
    flags = 0000_1100
    reg[ff] = 58
exact 10 cycles
0055: read 2nd byte fe
0056: read 3rd byte 00
  36 fe 00
    sbc fe, #00

0057: read 1st byte 8b
    alu:    ff       00    =>    ff
         11111111 00000000 => 11111111
    flags = 0010_1000
    reg[fe] = ff
exact 10 cycles
0058: read 2nd byte c4
  8b c4
    jr    , c4

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    ff       3f    =>    00
         11111111 00111111 => 00000000
    flags = 0100_1000
    reg[55] = 00

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0059: read 1st byte 5c
exact 12 cycles
005a: read 2nd byte fd
  5c fd
    ld r5, #fd
    reg[55] = fd

005b: read 1st byte ff
exact  6 cycles
005c: read 2nd byte ff
  ff
    nop

005c: read 1st byte ff
exact  6 cycles
005d: read 2nd byte 4a
  ff
    nop

005d: read 1st byte 4a
exact  6 cycles
005e: read 2nd byte be
  4a be
    djnz r4, be
    reg[54] = 14

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    fd       3f    =>    fe
         11111101 00111111 => 11111110
    flags = 0010_1000
    reg[55] = fe

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0051: read 1st byte 26
exact 10 cycles
0052: read 2nd byte ff
0053: read 3rd byte 08
  26 ff 08
    sub ff, #08

0054: read 1st byte 36
    alu:    68       08    =>    60
         01101000 00001000 => 01100000
    flags = 0000_1000
    reg[ff] = 60
exact 10 cycles
0055: read 2nd byte fe
0056: read 3rd byte 00
  36 fe 00
    sbc fe, #00

0057: read 1st byte 8b
    alu:    ff       00    =>    ff
         11111111 00000000 => 11111111
    flags = 0010_1000
    reg[fe] = ff
exact 10 cycles
0058: read 2nd byte c4
  8b c4
    jr    , c4

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    fe       3f    =>    ff
         11111110 00111111 => 11111111
    flags = 0010_1000
    reg[55] = ff

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0051: read 1st byte 26
exact 10 cycles
0052: read 2nd byte ff
0053: read 3rd byte 08
  26 ff 08
    sub ff, #08

0054: read 1st byte 36
    alu:    68       08    =>    60
         01101000 00001000 => 01100000
    flags = 0000_1000
    reg[ff] = 60
exact 10 cycles
0055: read 2nd byte fe
0056: read 3rd byte 00
  36 fe 00
    sbc fe, #00

0057: read 1st byte 8b
    alu:    ff       00    =>    ff
         11111111 00000000 => 11111111
    flags = 0010_1000
    reg[fe] = ff
exact 10 cycles
0058: read 2nd byte c4
  8b c4
    jr    , c4

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    ff       3f    =>    00
         11111111 00111111 => 00000000
    flags = 0100_1000
    reg[55] = 00

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0059: read 1st byte 5c
exact 12 cycles
005a: read 2nd byte fd
  5c fd
    ld r5, #fd
    reg[55] = fd

005b: read 1st byte ff
exact  6 cycles
005c: read 2nd byte ff
  ff
    nop

005c: read 1st byte ff
exact  6 cycles
005d: read 2nd byte 4a
  ff
    nop

005d: read 1st byte 4a
exact  6 cycles
005e: read 2nd byte be
  4a be
    djnz r4, be
    reg[54] = 13

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    fd       3f    =>    fe
         11111101 00111111 => 11111110
    flags = 0010_1000
    reg[55] = fe

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0051: read 1st byte 26
exact 10 cycles
0052: read 2nd byte ff
0053: read 3rd byte 08
  26 ff 08
    sub ff, #08

0054: read 1st byte 36
    alu:    70       08    =>    68
         01110000 00001000 => 01101000
    flags = 0000_1100
    reg[ff] = 68
exact 10 cycles
0055: read 2nd byte fe
0056: read 3rd byte 00
  36 fe 00
    sbc fe, #00

0057: read 1st byte 8b
    alu:    ff       00    =>    ff
         11111111 00000000 => 11111111
    flags = 0010_1000
    reg[fe] = ff
exact 10 cycles
0058: read 2nd byte c4
  8b c4
    jr    , c4

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    fe       3f    =>    ff
         11111110 00111111 => 11111111
    flags = 0010_1000
    reg[55] = ff

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0051: read 1st byte 26
exact 10 cycles
0052: read 2nd byte ff
0053: read 3rd byte 08
  26 ff 08
    sub ff, #08

0054: read 1st byte 36
    alu:    70       08    =>    68
         01110000 00001000 => 01101000
    flags = 0000_1100
    reg[ff] = 68
exact 10 cycles
0055: read 2nd byte fe
0056: read 3rd byte 00
  36 fe 00
    sbc fe, #00

0057: read 1st byte 8b
    alu:    ff       00    =>    ff
         11111111 00000000 => 11111111
    flags = 0010_1000
    reg[fe] = ff
exact 10 cycles
0058: read 2nd byte c4
  8b c4
    jr    , c4

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    ff       3f    =>    00
         11111111 00111111 => 00000000
    flags = 0100_1000
    reg[55] = 00

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0059: read 1st byte 5c
exact 12 cycles
005a: read 2nd byte fd
  5c fd
    ld r5, #fd
    reg[55] = fd

005b: read 1st byte ff
exact  6 cycles
005c: read 2nd byte ff
  ff
    nop

005c: read 1st byte ff
exact  6 cycles
005d: read 2nd byte 4a
  ff
    nop

005d: read 1st byte 4a
exact  6 cycles
005e: read 2nd byte be
  4a be
    djnz r4, be
    reg[54] = 12

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    fd       3f    =>    fe
         11111101 00111111 => 11111110
    flags = 0010_1000
    reg[55] = fe

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0051: read 1st byte 26
exact 10 cycles
0052: read 2nd byte ff
0053: read 3rd byte 08
  26 ff 08
    sub ff, #08

0054: read 1st byte 36
    alu:    78       08    =>    70
         01111000 00001000 => 01110000
    flags = 0000_1000
    reg[ff] = 70
exact 10 cycles
0055: read 2nd byte fe
0056: read 3rd byte 00
  36 fe 00
    sbc fe, #00

0057: read 1st byte 8b
    alu:    ff       00    =>    ff
         11111111 00000000 => 11111111
    flags = 0010_1000
    reg[fe] = ff
exact 10 cycles
0058: read 2nd byte c4
  8b c4
    jr    , c4

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    fe       3f    =>    ff
         11111110 00111111 => 11111111
    flags = 0010_1000
    reg[55] = ff

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0051: read 1st byte 26
exact 10 cycles
0052: read 2nd byte ff
0053: read 3rd byte 08
  26 ff 08
    sub ff, #08

0054: read 1st byte 36
    alu:    78       08    =>    70
         01111000 00001000 => 01110000
    flags = 0000_1000
    reg[ff] = 70
exact 10 cycles
0055: read 2nd byte fe
0056: read 3rd byte 00
  36 fe 00
    sbc fe, #00

0057: read 1st byte 8b
    alu:    ff       00    =>    ff
         11111111 00000000 => 11111111
    flags = 0010_1000
    reg[fe] = ff
exact 10 cycles
0058: read 2nd byte c4
  8b c4
    jr    , c4

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    ff       3f    =>    00
         11111111 00111111 => 00000000
    flags = 0100_1000
    reg[55] = 00

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0059: read 1st byte 5c
exact 12 cycles
005a: read 2nd byte fd
  5c fd
    ld r5, #fd
    reg[55] = fd

005b: read 1st byte ff
exact  6 cycles
005c: read 2nd byte ff
  ff
    nop

005c: read 1st byte ff
exact  6 cycles
005d: read 2nd byte 4a
  ff
    nop

005d: read 1st byte 4a
exact  6 cycles
005e: read 2nd byte be
  4a be
    djnz r4, be
    reg[54] = 11

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    fd       3f    =>    fe
         11111101 00111111 => 11111110
    flags = 0010_1000
    reg[55] = fe

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0051: read 1st byte 26
exact 10 cycles
0052: read 2nd byte ff
0053: read 3rd byte 08
  26 ff 08
    sub ff, #08

0054: read 1st byte 36
    alu:    80       08    =>    78
         10000000 00001000 => 01111000
    flags = 0000_1100
    reg[ff] = 78
exact 10 cycles
0055: read 2nd byte fe
0056: read 3rd byte 00
  36 fe 00
    sbc fe, #00

0057: read 1st byte 8b
    alu:    ff       00    =>    ff
         11111111 00000000 => 11111111
    flags = 0010_1000
    reg[fe] = ff
exact 10 cycles
0058: read 2nd byte c4
  8b c4
    jr    , c4

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    fe       3f    =>    ff
         11111110 00111111 => 11111111
    flags = 0010_1000
    reg[55] = ff

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0051: read 1st byte 26
exact 10 cycles
0052: read 2nd byte ff
0053: read 3rd byte 08
  26 ff 08
    sub ff, #08

0054: read 1st byte 36
    alu:    80       08    =>    78
         10000000 00001000 => 01111000
    flags = 0000_1100
    reg[ff] = 78
exact 10 cycles
0055: read 2nd byte fe
0056: read 3rd byte 00
  36 fe 00
    sbc fe, #00

0057: read 1st byte 8b
    alu:    ff       00    =>    ff
         11111111 00000000 => 11111111
    flags = 0010_1000
    reg[fe] = ff
exact 10 cycles
0058: read 2nd byte c4
  8b c4
    jr    , c4

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    ff       3f    =>    00
         11111111 00111111 => 00000000
    flags = 0100_1000
    reg[55] = 00

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0059: read 1st byte 5c
exact 12 cycles
005a: read 2nd byte fd
  5c fd
    ld r5, #fd
    reg[55] = fd

005b: read 1st byte ff
exact  6 cycles
005c: read 2nd byte ff
  ff
    nop

005c: read 1st byte ff
exact  6 cycles
005d: read 2nd byte 4a
  ff
    nop

005d: read 1st byte 4a
exact  6 cycles
005e: read 2nd byte be
  4a be
    djnz r4, be
    reg[54] = 10

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    fd       3f    =>    fe
         11111101 00111111 => 11111110
    flags = 0010_1000
    reg[55] = fe

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0051: read 1st byte 26
exact 10 cycles
0052: read 2nd byte ff
0053: read 3rd byte 08
  26 ff 08
    sub ff, #08

0054: read 1st byte 36
    alu:    88       08    =>    80
         10001000 00001000 => 10000000
    flags = 0010_1000
    reg[ff] = 80
exact 10 cycles
0055: read 2nd byte fe
0056: read 3rd byte 00
  36 fe 00
    sbc fe, #00

0057: read 1st byte 8b
    alu:    ff       00    =>    ff
         11111111 00000000 => 11111111
    flags = 0010_1000
    reg[fe] = ff
exact 10 cycles
0058: read 2nd byte c4
  8b c4
    jr    , c4

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    fe       3f    =>    ff
         11111110 00111111 => 11111111
    flags = 0010_1000
    reg[55] = ff

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0051: read 1st byte 26
exact 10 cycles
0052: read 2nd byte ff
0053: read 3rd byte 08
  26 ff 08
    sub ff, #08

0054: read 1st byte 36
    alu:    88       08    =>    80
         10001000 00001000 => 10000000
    flags = 0010_1000
    reg[ff] = 80
exact 10 cycles
0055: read 2nd byte fe
0056: read 3rd byte 00
  36 fe 00
    sbc fe, #00

0057: read 1st byte 8b
    alu:    ff       00    =>    ff
         11111111 00000000 => 11111111
    flags = 0010_1000
    reg[fe] = ff
exact 10 cycles
0058: read 2nd byte c4
  8b c4
    jr    , c4

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    ff       3f    =>    00
         11111111 00111111 => 00000000
    flags = 0100_1000
    reg[55] = 00

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0059: read 1st byte 5c
exact 12 cycles
005a: read 2nd byte fd
  5c fd
    ld r5, #fd
    reg[55] = fd

005b: read 1st byte ff
exact  6 cycles
005c: read 2nd byte ff
  ff
    nop

005c: read 1st byte ff
exact  6 cycles
005d: read 2nd byte 4a
  ff
    nop

005d: read 1st byte 4a
exact  6 cycles
005e: read 2nd byte be
  4a be
    djnz r4, be
    reg[54] = 0f

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    fd       3f    =>    fe
         11111101 00111111 => 11111110
    flags = 0010_1000
    reg[55] = fe

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0051: read 1st byte 26
exact 10 cycles
0052: read 2nd byte ff
0053: read 3rd byte 08
  26 ff 08
    sub ff, #08

0054: read 1st byte 36
    alu:    90       08    =>    88
         10010000 00001000 => 10001000
    flags = 0010_1100
    reg[ff] = 88
exact 10 cycles
0055: read 2nd byte fe
0056: read 3rd byte 00
  36 fe 00
    sbc fe, #00

0057: read 1st byte 8b
    alu:    ff       00    =>    ff
         11111111 00000000 => 11111111
    flags = 0010_1000
    reg[fe] = ff
exact 10 cycles
0058: read 2nd byte c4
  8b c4
    jr    , c4

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    fe       3f    =>    ff
         11111110 00111111 => 11111111
    flags = 0010_1000
    reg[55] = ff

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0051: read 1st byte 26
exact 10 cycles
0052: read 2nd byte ff
0053: read 3rd byte 08
  26 ff 08
    sub ff, #08

0054: read 1st byte 36
    alu:    90       08    =>    88
         10010000 00001000 => 10001000
    flags = 0010_1100
    reg[ff] = 88
exact 10 cycles
0055: read 2nd byte fe
0056: read 3rd byte 00
  36 fe 00
    sbc fe, #00

0057: read 1st byte 8b
    alu:    ff       00    =>    ff
         11111111 00000000 => 11111111
    flags = 0010_1000
    reg[fe] = ff
exact 10 cycles
0058: read 2nd byte c4
  8b c4
    jr    , c4

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    ff       3f    =>    00
         11111111 00111111 => 00000000
    flags = 0100_1000
    reg[55] = 00

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0059: read 1st byte 5c
exact 12 cycles
005a: read 2nd byte fd
  5c fd
    ld r5, #fd
    reg[55] = fd

005b: read 1st byte ff
exact  6 cycles
005c: read 2nd byte ff
  ff
    nop

005c: read 1st byte ff
exact  6 cycles
005d: read 2nd byte 4a
  ff
    nop

005d: read 1st byte 4a
exact  6 cycles
005e: read 2nd byte be
  4a be
    djnz r4, be
    reg[54] = 0e

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    fd       3f    =>    fe
         11111101 00111111 => 11111110
    flags = 0010_1000
    reg[55] = fe

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0051: read 1st byte 26
exact 10 cycles
0052: read 2nd byte ff
0053: read 3rd byte 08
  26 ff 08
    sub ff, #08

0054: read 1st byte 36
    alu:    98       08    =>    90
         10011000 00001000 => 10010000
    flags = 0010_1000
    reg[ff] = 90
exact 10 cycles
0055: read 2nd byte fe
0056: read 3rd byte 00
  36 fe 00
    sbc fe, #00

0057: read 1st byte 8b
    alu:    ff       00    =>    ff
         11111111 00000000 => 11111111
    flags = 0010_1000
    reg[fe] = ff
exact 10 cycles
0058: read 2nd byte c4
  8b c4
    jr    , c4

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    fe       3f    =>    ff
         11111110 00111111 => 11111111
    flags = 0010_1000
    reg[55] = ff

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0051: read 1st byte 26
exact 10 cycles
0052: read 2nd byte ff
0053: read 3rd byte 08
  26 ff 08
    sub ff, #08

0054: read 1st byte 36
    alu:    98       08    =>    90
         10011000 00001000 => 10010000
    flags = 0010_1000
    reg[ff] = 90
exact 10 cycles
0055: read 2nd byte fe
0056: read 3rd byte 00
  36 fe 00
    sbc fe, #00

0057: read 1st byte 8b
    alu:    ff       00    =>    ff
         11111111 00000000 => 11111111
    flags = 0010_1000
    reg[fe] = ff
exact 10 cycles
0058: read 2nd byte c4
  8b c4
    jr    , c4

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    ff       3f    =>    00
         11111111 00111111 => 00000000
    flags = 0100_1000
    reg[55] = 00

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0059: read 1st byte 5c
exact 12 cycles
005a: read 2nd byte fd
  5c fd
    ld r5, #fd
    reg[55] = fd

005b: read 1st byte ff
exact  6 cycles
005c: read 2nd byte ff
  ff
    nop

005c: read 1st byte ff
exact  6 cycles
005d: read 2nd byte 4a
  ff
    nop

005d: read 1st byte 4a
exact  6 cycles
005e: read 2nd byte be
  4a be
    djnz r4, be
    reg[54] = 0d

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    fd       3f    =>    fe
         11111101 00111111 => 11111110
    flags = 0010_1000
    reg[55] = fe

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0051: read 1st byte 26
exact 10 cycles
0052: read 2nd byte ff
0053: read 3rd byte 08
  26 ff 08
    sub ff, #08

0054: read 1st byte 36
    alu:    a0       08    =>    98
         10100000 00001000 => 10011000
    flags = 0010_1100
    reg[ff] = 98
exact 10 cycles
0055: read 2nd byte fe
0056: read 3rd byte 00
  36 fe 00
    sbc fe, #00

0057: read 1st byte 8b
    alu:    ff       00    =>    ff
         11111111 00000000 => 11111111
    flags = 0010_1000
    reg[fe] = ff
exact 10 cycles
0058: read 2nd byte c4
  8b c4
    jr    , c4

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    fe       3f    =>    ff
         11111110 00111111 => 11111111
    flags = 0010_1000
    reg[55] = ff

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0051: read 1st byte 26
exact 10 cycles
0052: read 2nd byte ff
0053: read 3rd byte 08
  26 ff 08
    sub ff, #08

0054: read 1st byte 36
    alu:    a0       08    =>    98
         10100000 00001000 => 10011000
    flags = 0010_1100
    reg[ff] = 98
exact 10 cycles
0055: read 2nd byte fe
0056: read 3rd byte 00
  36 fe 00
    sbc fe, #00

0057: read 1st byte 8b
    alu:    ff       00    =>    ff
         11111111 00000000 => 11111111
    flags = 0010_1000
    reg[fe] = ff
exact 10 cycles
0058: read 2nd byte c4
  8b c4
    jr    , c4

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    ff       3f    =>    00
         11111111 00111111 => 00000000
    flags = 0100_1000
    reg[55] = 00

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0059: read 1st byte 5c
exact 12 cycles
005a: read 2nd byte fd
  5c fd
    ld r5, #fd
    reg[55] = fd

005b: read 1st byte ff
exact  6 cycles
005c: read 2nd byte ff
  ff
    nop

005c: read 1st byte ff
exact  6 cycles
005d: read 2nd byte 4a
  ff
    nop

005d: read 1st byte 4a
exact  6 cycles
005e: read 2nd byte be
  4a be
    djnz r4, be
    reg[54] = 0c

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    fd       3f    =>    fe
         11111101 00111111 => 11111110
    flags = 0010_1000
    reg[55] = fe

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0051: read 1st byte 26
exact 10 cycles
0052: read 2nd byte ff
0053: read 3rd byte 08
  26 ff 08
    sub ff, #08

0054: read 1st byte 36
    alu:    a8       08    =>    a0
         10101000 00001000 => 10100000
    flags = 0010_1000
    reg[ff] = a0
exact 10 cycles
0055: read 2nd byte fe
0056: read 3rd byte 00
  36 fe 00
    sbc fe, #00

0057: read 1st byte 8b
    alu:    ff       00    =>    ff
         11111111 00000000 => 11111111
    flags = 0010_1000
    reg[fe] = ff
exact 10 cycles
0058: read 2nd byte c4
  8b c4
    jr    , c4

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    fe       3f    =>    ff
         11111110 00111111 => 11111111
    flags = 0010_1000
    reg[55] = ff

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0051: read 1st byte 26
exact 10 cycles
0052: read 2nd byte ff
0053: read 3rd byte 08
  26 ff 08
    sub ff, #08

0054: read 1st byte 36
    alu:    a8       08    =>    a0
         10101000 00001000 => 10100000
    flags = 0010_1000
    reg[ff] = a0
exact 10 cycles
0055: read 2nd byte fe
0056: read 3rd byte 00
  36 fe 00
    sbc fe, #00

0057: read 1st byte 8b
    alu:    ff       00    =>    ff
         11111111 00000000 => 11111111
    flags = 0010_1000
    reg[fe] = ff
exact 10 cycles
0058: read 2nd byte c4
  8b c4
    jr    , c4

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    ff       3f    =>    00
         11111111 00111111 => 00000000
    flags = 0100_1000
    reg[55] = 00

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0059: read 1st byte 5c
exact 12 cycles
005a: read 2nd byte fd
  5c fd
    ld r5, #fd
    reg[55] = fd

005b: read 1st byte ff
exact  6 cycles
005c: read 2nd byte ff
  ff
    nop

005c: read 1st byte ff
exact  6 cycles
005d: read 2nd byte 4a
  ff
    nop

005d: read 1st byte 4a
exact  6 cycles
005e: read 2nd byte be
  4a be
    djnz r4, be
    reg[54] = 0b

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    fd       3f    =>    fe
         11111101 00111111 => 11111110
    flags = 0010_1000
    reg[55] = fe

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0051: read 1st byte 26
exact 10 cycles
0052: read 2nd byte ff
0053: read 3rd byte 08
  26 ff 08
    sub ff, #08

0054: read 1st byte 36
    alu:    b0       08    =>    a8
         10110000 00001000 => 10101000
    flags = 0010_1100
    reg[ff] = a8
exact 10 cycles
0055: read 2nd byte fe
0056: read 3rd byte 00
  36 fe 00
    sbc fe, #00

0057: read 1st byte 8b
    alu:    ff       00    =>    ff
         11111111 00000000 => 11111111
    flags = 0010_1000
    reg[fe] = ff
exact 10 cycles
0058: read 2nd byte c4
  8b c4
    jr    , c4

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    fe       3f    =>    ff
         11111110 00111111 => 11111111
    flags = 0010_1000
    reg[55] = ff

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0051: read 1st byte 26
exact 10 cycles
0052: read 2nd byte ff
0053: read 3rd byte 08
  26 ff 08
    sub ff, #08

0054: read 1st byte 36
    alu:    b0       08    =>    a8
         10110000 00001000 => 10101000
    flags = 0010_1100
    reg[ff] = a8
exact 10 cycles
0055: read 2nd byte fe
0056: read 3rd byte 00
  36 fe 00
    sbc fe, #00

0057: read 1st byte 8b
    alu:    ff       00    =>    ff
         11111111 00000000 => 11111111
    flags = 0010_1000
    reg[fe] = ff
exact 10 cycles
0058: read 2nd byte c4
  8b c4
    jr    , c4

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    ff       3f    =>    00
         11111111 00111111 => 00000000
    flags = 0100_1000
    reg[55] = 00

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0059: read 1st byte 5c
exact 12 cycles
005a: read 2nd byte fd
  5c fd
    ld r5, #fd
    reg[55] = fd

005b: read 1st byte ff
exact  6 cycles
005c: read 2nd byte ff
  ff
    nop

005c: read 1st byte ff
exact  6 cycles
005d: read 2nd byte 4a
  ff
    nop

005d: read 1st byte 4a
exact  6 cycles
005e: read 2nd byte be
  4a be
    djnz r4, be
    reg[54] = 0a

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    fd       3f    =>    fe
         11111101 00111111 => 11111110
    flags = 0010_1000
    reg[55] = fe

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0051: read 1st byte 26
exact 10 cycles
0052: read 2nd byte ff
0053: read 3rd byte 08
  26 ff 08
    sub ff, #08

0054: read 1st byte 36
    alu:    b8       08    =>    b0
         10111000 00001000 => 10110000
    flags = 0010_1000
    reg[ff] = b0
exact 10 cycles
0055: read 2nd byte fe
0056: read 3rd byte 00
  36 fe 00
    sbc fe, #00

0057: read 1st byte 8b
    alu:    ff       00    =>    ff
         11111111 00000000 => 11111111
    flags = 0010_1000
    reg[fe] = ff
exact 10 cycles
0058: read 2nd byte c4
  8b c4
    jr    , c4

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    fe       3f    =>    ff
         11111110 00111111 => 11111111
    flags = 0010_1000
    reg[55] = ff

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0051: read 1st byte 26
exact 10 cycles
0052: read 2nd byte ff
0053: read 3rd byte 08
  26 ff 08
    sub ff, #08

0054: read 1st byte 36
    alu:    b8       08    =>    b0
         10111000 00001000 => 10110000
    flags = 0010_1000
    reg[ff] = b0
exact 10 cycles
0055: read 2nd byte fe
0056: read 3rd byte 00
  36 fe 00
    sbc fe, #00

0057: read 1st byte 8b
    alu:    ff       00    =>    ff
         11111111 00000000 => 11111111
    flags = 0010_1000
    reg[fe] = ff
exact 10 cycles
0058: read 2nd byte c4
  8b c4
    jr    , c4

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    ff       3f    =>    00
         11111111 00111111 => 00000000
    flags = 0100_1000
    reg[55] = 00

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0059: read 1st byte 5c
exact 12 cycles
005a: read 2nd byte fd
  5c fd
    ld r5, #fd
    reg[55] = fd

005b: read 1st byte ff
exact  6 cycles
005c: read 2nd byte ff
  ff
    nop

005c: read 1st byte ff
exact  6 cycles
005d: read 2nd byte 4a
  ff
    nop

005d: read 1st byte 4a
exact  6 cycles
005e: read 2nd byte be
  4a be
    djnz r4, be
    reg[54] = 09

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    fd       3f    =>    fe
         11111101 00111111 => 11111110
    flags = 0010_1000
    reg[55] = fe

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0051: read 1st byte 26
exact 10 cycles
0052: read 2nd byte ff
0053: read 3rd byte 08
  26 ff 08
    sub ff, #08

0054: read 1st byte 36
    alu:    c0       08    =>    b8
         11000000 00001000 => 10111000
    flags = 0010_1100
    reg[ff] = b8
exact 10 cycles
0055: read 2nd byte fe
0056: read 3rd byte 00
  36 fe 00
    sbc fe, #00

0057: read 1st byte 8b
    alu:    ff       00    =>    ff
         11111111 00000000 => 11111111
    flags = 0010_1000
    reg[fe] = ff
exact 10 cycles
0058: read 2nd byte c4
  8b c4
    jr    , c4

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    fe       3f    =>    ff
         11111110 00111111 => 11111111
    flags = 0010_1000
    reg[55] = ff

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0051: read 1st byte 26
exact 10 cycles
0052: read 2nd byte ff
0053: read 3rd byte 08
  26 ff 08
    sub ff, #08

0054: read 1st byte 36
    alu:    c0       08    =>    b8
         11000000 00001000 => 10111000
    flags = 0010_1100
    reg[ff] = b8
exact 10 cycles
0055: read 2nd byte fe
0056: read 3rd byte 00
  36 fe 00
    sbc fe, #00

0057: read 1st byte 8b
    alu:    ff       00    =>    ff
         11111111 00000000 => 11111111
    flags = 0010_1000
    reg[fe] = ff
exact 10 cycles
0058: read 2nd byte c4
  8b c4
    jr    , c4

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    ff       3f    =>    00
         11111111 00111111 => 00000000
    flags = 0100_1000
    reg[55] = 00

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0059: read 1st byte 5c
exact 12 cycles
005a: read 2nd byte fd
  5c fd
    ld r5, #fd
    reg[55] = fd

005b: read 1st byte ff
exact  6 cycles
005c: read 2nd byte ff
  ff
    nop

005c: read 1st byte ff
exact  6 cycles
005d: read 2nd byte 4a
  ff
    nop

005d: read 1st byte 4a
exact  6 cycles
005e: read 2nd byte be
  4a be
    djnz r4, be
    reg[54] = 08

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    fd       3f    =>    fe
         11111101 00111111 => 11111110
    flags = 0010_1000
    reg[55] = fe

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0051: read 1st byte 26
exact 10 cycles
0052: read 2nd byte ff
0053: read 3rd byte 08
  26 ff 08
    sub ff, #08

0054: read 1st byte 36
    alu:    c8       08    =>    c0
         11001000 00001000 => 11000000
    flags = 0010_1000
    reg[ff] = c0
exact 10 cycles
0055: read 2nd byte fe
0056: read 3rd byte 00
  36 fe 00
    sbc fe, #00

0057: read 1st byte 8b
    alu:    ff       00    =>    ff
         11111111 00000000 => 11111111
    flags = 0010_1000
    reg[fe] = ff
exact 10 cycles
0058: read 2nd byte c4
  8b c4
    jr    , c4

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    fe       3f    =>    ff
         11111110 00111111 => 11111111
    flags = 0010_1000
    reg[55] = ff

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0051: read 1st byte 26
exact 10 cycles
0052: read 2nd byte ff
0053: read 3rd byte 08
  26 ff 08
    sub ff, #08

0054: read 1st byte 36
    alu:    c8       08    =>    c0
         11001000 00001000 => 11000000
    flags = 0010_1000
    reg[ff] = c0
exact 10 cycles
0055: read 2nd byte fe
0056: read 3rd byte 00
  36 fe 00
    sbc fe, #00

0057: read 1st byte 8b
    alu:    ff       00    =>    ff
         11111111 00000000 => 11111111
    flags = 0010_1000
    reg[fe] = ff
exact 10 cycles
0058: read 2nd byte c4
  8b c4
    jr    , c4

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    ff       3f    =>    00
         11111111 00111111 => 00000000
    flags = 0100_1000
    reg[55] = 00

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0059: read 1st byte 5c
exact 12 cycles
005a: read 2nd byte fd
  5c fd
    ld r5, #fd
    reg[55] = fd

005b: read 1st byte ff
exact  6 cycles
005c: read 2nd byte ff
  ff
    nop

005c: read 1st byte ff
exact  6 cycles
005d: read 2nd byte 4a
  ff
    nop

005d: read 1st byte 4a
exact  6 cycles
005e: read 2nd byte be
  4a be
    djnz r4, be
    reg[54] = 07

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    fd       3f    =>    fe
         11111101 00111111 => 11111110
    flags = 0010_1000
    reg[55] = fe

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0051: read 1st byte 26
exact 10 cycles
0052: read 2nd byte ff
0053: read 3rd byte 08
  26 ff 08
    sub ff, #08

0054: read 1st byte 36
    alu:    d0       08    =>    c8
         11010000 00001000 => 11001000
    flags = 0010_1100
    reg[ff] = c8
exact 10 cycles
0055: read 2nd byte fe
0056: read 3rd byte 00
  36 fe 00
    sbc fe, #00

0057: read 1st byte 8b
    alu:    ff       00    =>    ff
         11111111 00000000 => 11111111
    flags = 0010_1000
    reg[fe] = ff
exact 10 cycles
0058: read 2nd byte c4
  8b c4
    jr    , c4

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    fe       3f    =>    ff
         11111110 00111111 => 11111111
    flags = 0010_1000
    reg[55] = ff

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0051: read 1st byte 26
exact 10 cycles
0052: read 2nd byte ff
0053: read 3rd byte 08
  26 ff 08
    sub ff, #08

0054: read 1st byte 36
    alu:    d0       08    =>    c8
         11010000 00001000 => 11001000
    flags = 0010_1100
    reg[ff] = c8
exact 10 cycles
0055: read 2nd byte fe
0056: read 3rd byte 00
  36 fe 00
    sbc fe, #00

0057: read 1st byte 8b
    alu:    ff       00    =>    ff
         11111111 00000000 => 11111111
    flags = 0010_1000
    reg[fe] = ff
exact 10 cycles
0058: read 2nd byte c4
  8b c4
    jr    , c4

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    ff       3f    =>    00
         11111111 00111111 => 00000000
    flags = 0100_1000
    reg[55] = 00

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0059: read 1st byte 5c
exact 12 cycles
005a: read 2nd byte fd
  5c fd
    ld r5, #fd
    reg[55] = fd

005b: read 1st byte ff
exact  6 cycles
005c: read 2nd byte ff
  ff
    nop

005c: read 1st byte ff
exact  6 cycles
005d: read 2nd byte 4a
  ff
    nop

005d: read 1st byte 4a
exact  6 cycles
005e: read 2nd byte be
  4a be
    djnz r4, be
    reg[54] = 06

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    fd       3f    =>    fe
         11111101 00111111 => 11111110
    flags = 0010_1000
    reg[55] = fe

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0051: read 1st byte 26
exact 10 cycles
0052: read 2nd byte ff
0053: read 3rd byte 08
  26 ff 08
    sub ff, #08

0054: read 1st byte 36
    alu:    d8       08    =>    d0
         11011000 00001000 => 11010000
    flags = 0010_1000
    reg[ff] = d0
exact 10 cycles
0055: read 2nd byte fe
0056: read 3rd byte 00
  36 fe 00
    sbc fe, #00

0057: read 1st byte 8b
    alu:    ff       00    =>    ff
         11111111 00000000 => 11111111
    flags = 0010_1000
    reg[fe] = ff
exact 10 cycles
0058: read 2nd byte c4
  8b c4
    jr    , c4

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    fe       3f    =>    ff
         11111110 00111111 => 11111111
    flags = 0010_1000
    reg[55] = ff

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0051: read 1st byte 26
exact 10 cycles
0052: read 2nd byte ff
0053: read 3rd byte 08
  26 ff 08
    sub ff, #08

0054: read 1st byte 36
    alu:    d8       08    =>    d0
         11011000 00001000 => 11010000
    flags = 0010_1000
    reg[ff] = d0
exact 10 cycles
0055: read 2nd byte fe
0056: read 3rd byte 00
  36 fe 00
    sbc fe, #00

0057: read 1st byte 8b
    alu:    ff       00    =>    ff
         11111111 00000000 => 11111111
    flags = 0010_1000
    reg[fe] = ff
exact 10 cycles
0058: read 2nd byte c4
  8b c4
    jr    , c4

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    ff       3f    =>    00
         11111111 00111111 => 00000000
    flags = 0100_1000
    reg[55] = 00

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0059: read 1st byte 5c
exact 12 cycles
005a: read 2nd byte fd
  5c fd
    ld r5, #fd
    reg[55] = fd

005b: read 1st byte ff
exact  6 cycles
005c: read 2nd byte ff
  ff
    nop

005c: read 1st byte ff
exact  6 cycles
005d: read 2nd byte 4a
  ff
    nop

005d: read 1st byte 4a
exact  6 cycles
005e: read 2nd byte be
  4a be
    djnz r4, be
    reg[54] = 05

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    fd       3f    =>    fe
         11111101 00111111 => 11111110
    flags = 0010_1000
    reg[55] = fe

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0051: read 1st byte 26
exact 10 cycles
0052: read 2nd byte ff
0053: read 3rd byte 08
  26 ff 08
    sub ff, #08

0054: read 1st byte 36
    alu:    e0       08    =>    d8
         11100000 00001000 => 11011000
    flags = 0010_1100
    reg[ff] = d8
exact 10 cycles
0055: read 2nd byte fe
0056: read 3rd byte 00
  36 fe 00
    sbc fe, #00

0057: read 1st byte 8b
    alu:    ff       00    =>    ff
         11111111 00000000 => 11111111
    flags = 0010_1000
    reg[fe] = ff
exact 10 cycles
0058: read 2nd byte c4
  8b c4
    jr    , c4

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    fe       3f    =>    ff
         11111110 00111111 => 11111111
    flags = 0010_1000
    reg[55] = ff

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0051: read 1st byte 26
exact 10 cycles
0052: read 2nd byte ff
0053: read 3rd byte 08
  26 ff 08
    sub ff, #08

0054: read 1st byte 36
    alu:    e0       08    =>    d8
         11100000 00001000 => 11011000
    flags = 0010_1100
    reg[ff] = d8
exact 10 cycles
0055: read 2nd byte fe
0056: read 3rd byte 00
  36 fe 00
    sbc fe, #00

0057: read 1st byte 8b
    alu:    ff       00    =>    ff
         11111111 00000000 => 11111111
    flags = 0010_1000
    reg[fe] = ff
exact 10 cycles
0058: read 2nd byte c4
  8b c4
    jr    , c4

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    ff       3f    =>    00
         11111111 00111111 => 00000000
    flags = 0100_1000
    reg[55] = 00

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0059: read 1st byte 5c
exact 12 cycles
005a: read 2nd byte fd
  5c fd
    ld r5, #fd
    reg[55] = fd

005b: read 1st byte ff
exact  6 cycles
005c: read 2nd byte ff
  ff
    nop

005c: read 1st byte ff
exact  6 cycles
005d: read 2nd byte 4a
  ff
    nop

005d: read 1st byte 4a
exact  6 cycles
005e: read 2nd byte be
  4a be
    djnz r4, be
    reg[54] = 04

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    fd       3f    =>    fe
         11111101 00111111 => 11111110
    flags = 0010_1000
    reg[55] = fe

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0051: read 1st byte 26
exact 10 cycles
0052: read 2nd byte ff
0053: read 3rd byte 08
  26 ff 08
    sub ff, #08

0054: read 1st byte 36
    alu:    e8       08    =>    e0
         11101000 00001000 => 11100000
    flags = 0010_1000
    reg[ff] = e0
exact 10 cycles
0055: read 2nd byte fe
0056: read 3rd byte 00
  36 fe 00
    sbc fe, #00

0057: read 1st byte 8b
    alu:    ff       00    =>    ff
         11111111 00000000 => 11111111
    flags = 0010_1000
    reg[fe] = ff
exact 10 cycles
0058: read 2nd byte c4
  8b c4
    jr    , c4

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    fe       3f    =>    ff
         11111110 00111111 => 11111111
    flags = 0010_1000
    reg[55] = ff

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0051: read 1st byte 26
exact 10 cycles
0052: read 2nd byte ff
0053: read 3rd byte 08
  26 ff 08
    sub ff, #08

0054: read 1st byte 36
    alu:    e8       08    =>    e0
         11101000 00001000 => 11100000
    flags = 0010_1000
    reg[ff] = e0
exact 10 cycles
0055: read 2nd byte fe
0056: read 3rd byte 00
  36 fe 00
    sbc fe, #00

0057: read 1st byte 8b
    alu:    ff       00    =>    ff
         11111111 00000000 => 11111111
    flags = 0010_1000
    reg[fe] = ff
exact 10 cycles
0058: read 2nd byte c4
  8b c4
    jr    , c4

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    ff       3f    =>    00
         11111111 00111111 => 00000000
    flags = 0100_1000
    reg[55] = 00

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0059: read 1st byte 5c
exact 12 cycles
005a: read 2nd byte fd
  5c fd
    ld r5, #fd
    reg[55] = fd

005b: read 1st byte ff
exact  6 cycles
005c: read 2nd byte ff
  ff
    nop

005c: read 1st byte ff
exact  6 cycles
005d: read 2nd byte 4a
  ff
    nop

005d: read 1st byte 4a
exact  6 cycles
005e: read 2nd byte be
  4a be
    djnz r4, be
    reg[54] = 03

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    fd       3f    =>    fe
         11111101 00111111 => 11111110
    flags = 0010_1000
    reg[55] = fe

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0051: read 1st byte 26
exact 10 cycles
0052: read 2nd byte ff
0053: read 3rd byte 08
  26 ff 08
    sub ff, #08

0054: read 1st byte 36
    alu:    f0       08    =>    e8
         11110000 00001000 => 11101000
    flags = 0010_1100
    reg[ff] = e8
exact 10 cycles
0055: read 2nd byte fe
0056: read 3rd byte 00
  36 fe 00
    sbc fe, #00

0057: read 1st byte 8b
    alu:    ff       00    =>    ff
         11111111 00000000 => 11111111
    flags = 0010_1000
    reg[fe] = ff
exact 10 cycles
0058: read 2nd byte c4
  8b c4
    jr    , c4

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    fe       3f    =>    ff
         11111110 00111111 => 11111111
    flags = 0010_1000
    reg[55] = ff

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0051: read 1st byte 26
exact 10 cycles
0052: read 2nd byte ff
0053: read 3rd byte 08
  26 ff 08
    sub ff, #08

0054: read 1st byte 36
    alu:    f0       08    =>    e8
         11110000 00001000 => 11101000
    flags = 0010_1100
    reg[ff] = e8
exact 10 cycles
0055: read 2nd byte fe
0056: read 3rd byte 00
  36 fe 00
    sbc fe, #00

0057: read 1st byte 8b
    alu:    ff       00    =>    ff
         11111111 00000000 => 11111111
    flags = 0010_1000
    reg[fe] = ff
exact 10 cycles
0058: read 2nd byte c4
  8b c4
    jr    , c4

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    ff       3f    =>    00
         11111111 00111111 => 00000000
    flags = 0100_1000
    reg[55] = 00

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0059: read 1st byte 5c
exact 12 cycles
005a: read 2nd byte fd
  5c fd
    ld r5, #fd
    reg[55] = fd

005b: read 1st byte ff
exact  6 cycles
005c: read 2nd byte ff
  ff
    nop

005c: read 1st byte ff
exact  6 cycles
005d: read 2nd byte 4a
  ff
    nop

005d: read 1st byte 4a
exact  6 cycles
005e: read 2nd byte be
  4a be
    djnz r4, be
    reg[54] = 02

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    fd       3f    =>    fe
         11111101 00111111 => 11111110
    flags = 0010_1000
    reg[55] = fe

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0051: read 1st byte 26
exact 10 cycles
0052: read 2nd byte ff
0053: read 3rd byte 08
  26 ff 08
    sub ff, #08

0054: read 1st byte 36
    alu:    f8       08    =>    f0
         11111000 00001000 => 11110000
    flags = 0010_1000
    reg[ff] = f0
exact 10 cycles
0055: read 2nd byte fe
0056: read 3rd byte 00
  36 fe 00
    sbc fe, #00

0057: read 1st byte 8b
    alu:    ff       00    =>    ff
         11111111 00000000 => 11111111
    flags = 0010_1000
    reg[fe] = ff
exact 10 cycles
0058: read 2nd byte c4
  8b c4
    jr    , c4

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    fe       3f    =>    ff
         11111110 00111111 => 11111111
    flags = 0010_1000
    reg[55] = ff

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0051: read 1st byte 26
exact 10 cycles
0052: read 2nd byte ff
0053: read 3rd byte 08
  26 ff 08
    sub ff, #08

0054: read 1st byte 36
    alu:    f8       08    =>    f0
         11111000 00001000 => 11110000
    flags = 0010_1000
    reg[ff] = f0
exact 10 cycles
0055: read 2nd byte fe
0056: read 3rd byte 00
  36 fe 00
    sbc fe, #00

0057: read 1st byte 8b
    alu:    ff       00    =>    ff
         11111111 00000000 => 11111111
    flags = 0010_1000
    reg[fe] = ff
exact 10 cycles
0058: read 2nd byte c4
  8b c4
    jr    , c4

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    ff       3f    =>    00
         11111111 00111111 => 00000000
    flags = 0100_1000
    reg[55] = 00

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0059: read 1st byte 5c
exact 12 cycles
005a: read 2nd byte fd
  5c fd
    ld r5, #fd
    reg[55] = fd

005b: read 1st byte ff
exact  6 cycles
005c: read 2nd byte ff
  ff
    nop

005c: read 1st byte ff
exact  6 cycles
005d: read 2nd byte 4a
  ff
    nop

005d: read 1st byte 4a
exact  6 cycles
005e: read 2nd byte be
  4a be
    djnz r4, be
    reg[54] = 01

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 0010_1000
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 0100_1000
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 0100_1000
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    fd       3f    =>    fe
         11111101 00111111 => 11111110
    flags = 0010_1000
    reg[55] = fe

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0051: read 1st byte 26
exact 10 cycles
0052: read 2nd byte ff
0053: read 3rd byte 08
  26 ff 08
    sub ff, #08

0054: read 1st byte 36
    alu:    00       08    =>    f8
         00000000 00001000 => 11111000
    flags = 1011_1100
    reg[ff] = f8
exact 10 cycles
0055: read 2nd byte fe
0056: read 3rd byte 00
  36 fe 00
    sbc fe, #00

0057: read 1st byte 8b
    alu:    00       00    =>    ff
         00000000 00000000 => 11111111
    flags = 1011_1100
    reg[fe] = ff
exact 10 cycles
0058: read 2nd byte c4
  8b c4
    jr    , c4

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 1101_1100
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 1010_1100
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 1100_1100
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 1100_1100
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 1100_1100
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    fe       3f    =>    ff
         11111110 00111111 => 11111111
    flags = 1010_1100
    reg[55] = ff

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0051: read 1st byte 26
exact 10 cycles
0052: read 2nd byte ff
0053: read 3rd byte 08
  26 ff 08
    sub ff, #08

0054: read 1st byte 36
    alu:    00       08    =>    f8
         00000000 00001000 => 11111000
    flags = 1011_1100
    reg[ff] = f8
exact 10 cycles
0055: read 2nd byte fe
0056: read 3rd byte 00
  36 fe 00
    sbc fe, #00

0057: read 1st byte 8b
    alu:    00       00    =>    ff
         00000000 00000000 => 11111111
    flags = 1011_1100
    reg[fe] = ff
exact 10 cycles
0058: read 2nd byte c4
  8b c4
    jr    , c4

001d: read 1st byte f0
exact 12 cycles
001e: read 2nd byte 80
  f0 80
   swap 80
    alu:    00       00    =>    00
         00000000 00000000 => 00000000
    flags = 1101_1100
    reg[80] = 00

001f: read 1st byte 46
exact  8 cycles
0020: read 2nd byte 03
0021: read 3rd byte 80
  46 03 80
     or 03, #80

0022: read 1st byte 56
LH on port37 expected
    alu:    00       80    =>    80
         00000000 10000000 => 10000000
    flags = 1010_1100
    reg[03] = 80
exact 10 cycles
0023: read 2nd byte 03
0024: read 3rd byte 7f
  56 03 7f
    and 03, #7f

0025: read 1st byte 76
HL on port37 expected
    alu:    80       7f    =>    00
         10000000 01111111 => 00000000
    flags = 1100_1100
    reg[03] = 00
exact 10 cycles
0026: read 2nd byte 6d
0027: read 3rd byte 80
  76 6d 80
     tm 6d, #80

0028: read 1st byte 6b
    alu:    00       80    =>    00
         00000000 10000000 => 00000000
    flags = 1100_1100
exact 10 cycles
0029: read 2nd byte 05
  6b 05
    jr   z, 05

002f: read 1st byte 56
exact 12 cycles
0030: read 2nd byte 03
0031: read 3rd byte 3f
  56 03 3f
    and 03, #3f

0032: read 1st byte 0b
    alu:    00       3f    =>    00
         00000000 00111111 => 00000000
    flags = 1100_1100
    reg[03] = 00
exact 10 cycles
0033: read 2nd byte fe
  0b fe
    jr   f, fe

0034: read 1st byte 0b
exact 10 cycles
0035: read 2nd byte fe
  0b fe
    jr   f, fe

0036: read 1st byte ff
exact 10 cycles
0037: read 2nd byte 50
  ff
    nop

0037: read 1st byte 50
exact  6 cycles
0038: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0039: read 1st byte ff
exact 10 cycles
003a: read 2nd byte 50
  ff
    nop

003a: read 1st byte 50
exact  6 cycles
003b: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003c: read 1st byte ff
exact 10 cycles
003d: read 2nd byte 50
  ff
    nop

003d: read 1st byte 50
exact  6 cycles
003e: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

003f: read 1st byte ff
exact 10 cycles
0040: read 2nd byte 50
  ff
    nop

0040: read 1st byte 50
exact  6 cycles
0041: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0042: read 1st byte ff
exact 10 cycles
0043: read 2nd byte 50
  ff
    nop

0043: read 1st byte 50
exact  6 cycles
0044: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0045: read 1st byte ff
exact 10 cycles
0046: read 2nd byte 50
  ff
    nop

0046: read 1st byte 50
exact  6 cycles
0047: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

0048: read 1st byte ff
exact 10 cycles
0049: read 2nd byte 50
  ff
    nop

0049: read 1st byte 50
exact  6 cycles
004a: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004b: read 1st byte ff
exact 10 cycles
004c: read 2nd byte 50
  ff
    nop

004c: read 1st byte 50
exact  6 cycles
004d: read 2nd byte 80
  50 80
    pop 80
    reg[80] = 00

004e: read 1st byte 5e
exact 10 cycles
004f: read 2nd byte 6b
  5e
    inc r5
    alu:    ff       3f    =>    00
         11111111 00111111 => 00000000
    flags = 1100_1100
    reg[55] = 00

004f: read 1st byte 6b
exact  6 cycles
0050: read 2nd byte 08
  6b 08
    jr   z, 08

0059: read 1st byte 5c
exact 12 cycles
005a: read 2nd byte fd
  5c fd
    ld r5, #fd
    reg[55] = fd

005b: read 1st byte ff
exact  6 cycles
005c: read 2nd byte ff
  ff
    nop

005c: read 1st byte ff
exact  6 cycles
005d: read 2nd byte 4a
  ff
    nop

005d: read 1st byte 4a
exact  6 cycles
005e: read 2nd byte be
  4a be
    djnz r4, be
    reg[54] = 00

005f: read 1st byte 8d
exact 10 cycles
0060: read 2nd byte 00
0061: read 3rd byte 0c
  8d 00 0c
    jp    , 000c

000c: read 1st byte 31
exact 12 cycles
000d: read 2nd byte 50
  31 50
    srp 50
    reg[fd] = 50

000e: read 1st byte e6
exact  6 cycles
000f: read 2nd byte f8
testSoC: SUCCESS
